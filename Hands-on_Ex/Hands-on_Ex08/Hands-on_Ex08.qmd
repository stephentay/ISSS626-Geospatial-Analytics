---
title: "Hands-on Ex 8"
subtitle: "Geographically Weighted Predictive Models"
author: "Stephen Tay"
date: "19 Oct 2024"
date-modified:  "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true 
---

# 1. Overview

**Geospatial predictive modeling** is based on the understanding that events or phenomena are not randomly or uniformly distributed across space. Instead, their occurrences are influenced by a variety of geospatial factors such as infrastructure, sociocultural dynamics, topography, and environmental conditions. These factors constrain and shape where events are likely to occur. Geospatial predictive modeling aims to capture these influences by analysing the spatial correlations between historical event locations and the environmental variables that represent these constraints and influences.

In this exercise, we will undertake the following steps to build a predictive model using the geographical random forest method:

-   **Prepare Train and Test Datasets** using appropriate data sampling methods.
-   **Calibrate Predictive Models** using both geospatial statistical learning and machine learning methods.
-   **Compare and Select the Best Model** which provides the most accurate predictions.
-   **Predict Future Outcomes** using the best-calibrated model.

The following R packages will be used in geospatial predictive modelling.

```{r}
pacman::p_load(sf, spdep, GWmodel, SpatialML, tmap, rsample, Metrics, tidyverse)
```

# 2. Importing & Preparing Data

::: panel-tabset
## 1. Import

```{r}
mdata <- read_rds("data/mdata.rds")
```

## 2. Check for duplicates

```{r}
any(duplicated(mdata))
```

## 3. Jitter

```{r}
set.seed(1234)
for (i in 1:nrow(mdata)) {
  coords <- st_coordinates(mdata[i, ])   # Extract current point coordinates
  jittered_coords <- coords + runif(n = 1, min = -0.1, max = 0.1)
  mdata[i,]$geometry <- st_sfc(st_point(c(jittered_coords), dim = "XY"), crs = 3414)
}
```

```{r}
any(duplicated(mdata))
```

```{r}
tmap_mode('view')
tm_shape(mdata) + 
  tm_dots() 
tmap_mode('plot')
```

## 4. Train/Test Split

```{r}
set.seed(1234)
resale_split <- initial_split(mdata, 
                              prop = 6.5/10)
train_data <- training(resale_split)
test_data <- testing(resale_split)
```

```{r}
#| echo: FALSE
#| eval: FALSE
write_rds(train_data, "data/model/train_data.rds")
write_rds(test_data, "data/model/test_data.rds")
```
:::

# 3. Correlation Matrix

The correlation matrix above shows that all the correlation values are below 0.8. Hence, there is no sign of multicolinearity.

```{r}
mdata_nogeo <- mdata %>%
  st_drop_geometry()
corrplot::corrplot(cor(mdata_nogeo[, 2:17]), 
                   diag = FALSE, 
                   order = "AOE",
                   tl.pos = "td", 
                   tl.cex = 0.5, 
                   method = "number", 
                   type = "upper")
```

# 4. Building a non-spatial multiple linear regression

```{r}
#| echo: FALSE
#| eval: FALSE
train_data <- read_rds("data/model/train_data.rds")
test_data <- read_rds("data/model/test_data.rds")
```

```{r}
price_mlr <- lm(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                data=train_data)
summary(price_mlr)
```

```{r}
#| echo: FALSE
#| eval: FALSE
write_rds(price_mlr, "data/model/price_mlr.rds" ) 
```

# 5. GWR Predictive Model

## 1. Convert sf train dataframe to sp dataframe

```{r}
train_data_sp <- as_Spatial(train_data)
train_data_sp
```

## 2. Computing adaptive bandwidth

```{r}
bw_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                  data=train_data_sp,
                  approach="CV",
                  kernel="gaussian",
                  adaptive=TRUE,
                  longlat=FALSE)
```

```{r}
#| echo: FALSE
#| eval: FALSE
write_rds(bw_adaptive, "data/model/bw_adaptive.rds")
```

## 3. Building adpative bandwith GWR model

```{r}
#| echo: FALSE
#| eval: FALSE
bw_adaptive <- read_rds("data/model/bw_adaptive.rds")
```

```{r}
gwr_adaptive <- gwr.basic(formula = resale_price ~
                            floor_area_sqm + storey_order +
                            remaining_lease_mths + PROX_CBD + 
                            PROX_ELDERLYCARE + PROX_HAWKER +
                            PROX_MRT + PROX_PARK + PROX_MALL + 
                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                            WITHIN_1KM_PRISCH,
                          data=train_data_sp,
                          bw=bw_adaptive, 
                          kernel = 'gaussian', 
                          adaptive=TRUE,
                          longlat = FALSE)
gwr_adaptive
```

```{r}
#| echo: FALSE
#| eval: FALSE
write_rds(gwr_adaptive, "data/model/gwr_adaptive.rds")
```

```{r}
#| echo: FALSE
#| eval: FALSE
gwr_adaptive <- read_rds("data/model/gwr_adaptive.rds")
```

## 4. Convert sf test dataframe to sp dataframe

```{r}
test_data_sp <- test_data %>%
  as_Spatial()
test_data_sp
```

## 5. Computing adaptive bandwidth for test set

```{r}
gwr_bw_test_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                  data=test_data_sp,
                  approach="CV",
                  kernel="gaussian",
                  adaptive=TRUE,
                  longlat=FALSE)
```

## 6. Predicting values from test set

```{r}
#| eval: FALSE
gwr_pred <- gwr.predict(formula = resale_price ~
                          floor_area_sqm + storey_order +
                          remaining_lease_mths + PROX_CBD + 
                          PROX_ELDERLYCARE + PROX_HAWKER + 
                          PROX_MRT + PROX_PARK + PROX_MALL + 
                          PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                          WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + 
                          WITHIN_1KM_PRISCH, 
                        data = train_data_sp, 
                        predictdata = test_data_sp, 
                        bw=40, 
                        kernel = 'gaussian', 
                        adaptive=TRUE, 
                        longlat = FALSE)
```

# 6. Geographical Random Forest Method

## 1. Extracting coordinates data

```{r}
coords <- st_coordinates(mdata)
coords_train <- st_coordinates(train_data)
coords_test <- st_coordinates(test_data)
```

```{r}
#| echo: FALSE
#| eval: FALSE
coords_train <- write_rds(coords_train, "data/model/coords_train.rds" )
coords_test <- write_rds(coords_test, "data/model/coords_test.rds" )
```

## 2. Drop geometry field

```{r}
train_data <- train_data %>% 
  st_drop_geometry()
```

## 3. Building random forest model

```{r}
set.seed(1234)
rf <- ranger(resale_price ~ floor_area_sqm + storey_order + 
               remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + 
               PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + 
               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + 
               WITHIN_1KM_PRISCH,
             data=train_data)
rf
```

```{r}
#| echo: FALSE
#| eval: FALSE
write_rds(rf, "data/model/rf.rds")
```

```{r}
#| echo: FALSE
#| eval: FALSE
rf <- read_rds("data/model/rf.rds")
```

## 4. Building geographical random forest model

```{r}
set.seed(1234)
gwRF_adaptive <- grf(formula = resale_price ~ floor_area_sqm + storey_order +
                       remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE +
                       PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +
                       PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                       WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                       WITHIN_1KM_PRISCH,
                     dframe=train_data, 
                     bw=55,
                     kernel="adaptive",
                     coords=coords_train)
```

```{r}
#| echo: FALSE
#| eval: FALSE
write_rds(gwRF_adaptive, "data/model/gwRF_adaptive.rds")
```

```{r}
#| echo: FALSE
#| eval: FALSE
gwRF_adaptive <- read_rds("data/model/gwRF_adaptive.rds")
```

## 5. Predicting values from test data

```{r}
test_data <- cbind(test_data, coords_test) %>%
  st_drop_geometry()
```

```{r}
gwRF_pred <- predict.grf(gwRF_adaptive, 
                           test_data, 
                           x.var.name="X",
                           y.var.name="Y", 
                           local.w=1,
                           global.w=0)
```

```{r}
#| echo: FALSE
#| eval: FALSE
write_rds(gwRF_pred, "data/model/gwRF_pred.rds")
```

```{r}
#| echo: FALSE
#| eval: FALSE
gwRF_pred <- read_rds("data/model/gwRF_pred.rds")
```

## 6. Convert predicting output into dataframe

```{r}
GRF_pred_df <- as.data.frame(gwRF_pred)
test_data_p <- cbind(test_data, GRF_pred_df)
```

```{r}
#| echo: FALSE
#| eval: FALSE
write_rds(test_data_p, "data/model/test_data_p.rds")
```

## 7. Evaluating using root mean square error

```{r}
rmse(test_data_p$resale_price, 
     test_data_p$gwRF_pred)
```

## 8. Visualising predicted valued

```{r}
ggplot(data = test_data_p,
       aes(x = gwRF_pred,
           y = resale_price)) +
  geom_point()
```
