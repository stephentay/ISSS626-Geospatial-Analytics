---
title: "Hands-on Ex 3"
subtitle: "Network Constrained Spatial Point Pattern Analysis"
author: "Stephen Tay"
date: "8 Sep 2024"
date-modified:  "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true 
---

# 1. Overview

**Network-constrained spatial point pattern analysis (NetSPAA)** focuses on studying events that occur along networks, such as roads and rivers, rather than across open spaces. Unlike traditional spatial analysis, which assumes events can happen anywhere and measures distances in straight lines, this method addresses phenomena restricted to networks, like traffic accidents or store locations. It is especially important for its accurate in detecting event clusters that occur along these networks.

The `spNetwork` package is a crucial geospatial R tool for conducting NetSPAA, specifically for:

-   Network Kernel Density Estimation (NKDE), and
-   Network-based G-function and K-function analysis.

```{r}
pacman::p_load(sf, spNetwork, tmap, tidyverse)
```

# 2. Importing & Transforming Data

This study analyses the spatial distribution of childcare centers in the Punggol Planning Area. We will import and work with two geospatial datasets:

-   `Punggol_St`: A line feature dataset representing the road network within the Punggol Planning Area.
-   `Punggol_CC`: A point feature dataset representing the locations of childcare centers within the Punggol Planning Area.

::: panel-tabset
## Punggol Road Network

After importing the road network data, it is essential to review the dataframe, verify the coordinate reference system (CRS) is correct, and check for any duplicated geometries.

```{r}
network <- st_read(dsn="data/geospatial", 
                   layer="Punggol_St")
```

```{r}
st_crs(network)
```

```{r}
network
```

```{r}
any(duplicated(network))
```

## Punggol Childcare Centers

After importing the point data, it is essential to review the dataframe, verify the CRS is correct, and check for any duplicated geometries. Since the point geometries are in 3-dimensional coordinates, they must be transformed to 2-dimensional coordinates using the `st_zm()` method.

```{r}
childcare <- st_read(dsn="data/geospatial",
                     layer="Punggol_CC")
```

```{r}
st_crs(childcare)
```

```{r}
childcare
```

```{r}
any(duplicated(childcare))
```

```{r}
childcare$geometry <- st_zm(childcare$geometry)
childcare
```
:::

# 3. GeoVisualisation of Childcare Centers

Before starting the analysis, it is good practice to visualize the geospatial data.

::: panel-tabset
## Simple Plot

```{r}
plot(st_geometry(network))
plot(childcare,add=T,col='red',pch = 19)
```

## Interactive Plot

```{r}
tmap_mode('view')
tm_shape(childcare) + 
  tm_dots() + 
  tm_shape(network) +
  tm_lines()
tmap_mode('plot')
```
:::

# 4. Network Kernel Density Estimation (NKDE) Analysis

## 4.1 Prepare lixels

Before computing NKDE, the SpatialLines object must be segmented into lixels with a specified minimum distance. The lixel length (lx_length) is set to 700m, and the minimum length (mindist) is set to 350m. After segmentation, if the final lixel is shorter than the minimum distance, it is merged with the previous lixel.

```{r}
lixels <- lixelize_lines(network, 
                         lx_length = 700, 
                         mindist = 350)
```

## 4.2 Compute lines' center point

Next, `lines_center()` from the spNetwork package will be used to generate a SpatialPointsDataFrame with points positioned at the center of each line, based on the line’s length, as shown in the code below.

```{r}
samples <- lines_center(lixels) 
```

## 4.3 Perform NKDE

We are ready to computer the NKDE. There are 3 methods in computing NKDE:

::: panel-tabset
### 4.3.1 Simple Method

The **simple method**, proposed by Xie and Yan (2008), differs from classical KDE in two key ways:

-   Events are snapped to a network.
-   Distances between sampling points and events are measured along the network (i.e., not using Euclidean distances).

Let’s examine the NKDE plot using the simple method below!

```{r}
simple_densities <- nkde(lines = network, events = childcare,
                  w = rep(1, nrow(childcare)), samples = samples,
                  kernel_name = "quartic", bw = 300, 
                  div= "bw", method = "simple", 
                  digits = 1, tol = 1,
                  grid_shape = c(1,1), max_depth = 8,
                  agg = 5, sparse = TRUE,
                  verbose = FALSE)
```

```{r}
samples$simple_density <- simple_densities*1000
lixels$simple_density <- simple_densities*1000
tmap_mode('view')
tm_shape(lixels) +
  tm_lines(col="simple_density") +
  tm_shape(childcare) +
  tm_dots()
tmap_mode('plot')
```

### 4.3.2 Discontinuous Method

The simple method has a limitation: the event’s mass is multiplied by the number of edges at an intersection, causing the kernel not to integrate to 1. To address this, Okabe and Sugihara (2012) proposed the **discontinuous NKDE**, which was further extended by Sugihara, Satoh, and Okabe (2010) for networks with cycles shorter than the bandwidth.

See the NKDE plot using the discontinuous method below!

```{r}
discontinuous_densities <- nkde(lines = network, events = childcare,
                  w = rep(1, nrow(childcare)), samples = samples,
                  kernel_name = "quartic", bw = 300, 
                  div= "bw", method = "discontinuous", 
                  digits = 1, tol = 1,
                  grid_shape = c(1,1), max_depth = 8,
                  agg = 5, sparse = TRUE,
                  verbose = FALSE)
```

```{r}
samples$discontinuous_density <- discontinuous_densities*1000
lixels$discontinuous_density <- discontinuous_densities*1000
tmap_mode('view')
tm_shape(lixels) +
  tm_lines(col="discontinuous_density") +
  tm_shape(childcare) +
  tm_dots()
tmap_mode('plot')
```

### 4.3.3 Continuous Method

Discontinuous NKDE can be counterintuitive, resulting in sharp differences between density values across the network, particularly problematic in networks with many closely spaced intersections. The **continuous method** adjusts NKDE values at intersections to ensure the kernel integrates to one, applying a backward correction to maintain continuity in density values. However, this method is recursive and computationally time-consuming.

See the NKDE plot using the continuous method below!

```{r}
continuous_densities <- nkde(lines = network, events = childcare,
                  w = rep(1, nrow(childcare)), samples = samples,
                  kernel_name = "quartic", bw = 300, 
                  div= "bw", method = "continuous", 
                  digits = 1, tol = 1,
                  grid_shape = c(1,1), max_depth = 8,
                  agg = 5, sparse = TRUE,
                  verbose = FALSE)
```

```{r}
samples$continuous_density <- continuous_densities*1000
lixels$continuous_density <- continuous_densities*1000
tmap_mode('view')
tm_shape(lixels) +
  tm_lines(col="continuous_density") +
  tm_shape(childcare) +
  tm_dots()
tmap_mode('plot')
```
:::

# 5. Network-constrained G- and K-function analysis

A test for complete spatial randomness (CSR) can be performed using the **network-constrained G- and K-functions**.

The test hypotheses are as follows:

-   H0: The distribution of childcare services in Punggol are randomly distributed along the road network.
-   H1: The distribution of childcare services in Punggol are not randomly distributed along the road network.

Alpha is set at 0.05, with 1000 Monte-carlo simulations.

```{r}
set.seed(2024)
kfun_childcare <- kfunctions(network, 
                             childcare,
                             start = 0, 
                             end = 1000, 
                             step = 50, 
                             width = 50, 
                             nsim = 1000, 
                             resolution = 50,
                             verbose = FALSE, 
                             conf_int = 0.05)
```

::: panel-tabset
## 5.1 Network K-function

The blue line represents the empirical network K-function of the childcare centers in Punggol, while the gray area shows the results of 1,000 simulations within the 2.5% - 97.5% confidence interval. Since the blue line falls below the lower boundary of the envelope between the 200-400m distance range, it indicates a regular pattern of childcare center locations along the Punggol road network.

```{r}
kfun_childcare$plotk
```

## 5.2 Network G-function

The blue line represents the empirical network G-function of the childcare centers in Punggol. Since the blue line falls below the lower boundary of the envelope in the 100-200m distance range, it suggests a regular pattern of childcare center locations along the Punggol road network.

```{r}
kfun_childcare$plotg
```
:::

# 6. Summary

Network-constrained spatial point pattern analysis revealed a regular distribution of childcare centers along the Punggol road network.
