---
title: "Hands-on Ex 7"
subtitle: "Geographically Weighted Explanatory Models"
author: "Stephen Tay"
date: "14 Oct 2024"
date-modified:  "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true 
---

# 1. Overview
**Geographically Weighted Regression (GWR)** is a spatial statistical technique designed to account for spatial non-stationarity, where relationships between variables vary across geographic locations. GWR models local relationships between independent variables (such as climate, demographic factors, and physical environment characteristics) and a dependent variable, providing insights into how these factors influence the outcome of interest at different spatial scales.

**This study constructs a hedonic pricing model for condominiums GWR.** The hedonic pricing model is a method commonly used in real estate economics to estimate the value of a property based on its characteristics. It breaks down the price into various attributes, such as location, size, number of rooms, proximity to amenities, and other features that impact a propertyâ€™s market value. By applying GWR, the model allows for an understanding of how the influence of these factors varies across different geographic locations, providing localized insights into what drives property prices.

In addition to the standard R packages for geospatial analysis, we will load the following R packages specifically used GWR:

-	olsrr: For building Ordinary Least Squares (OLS) models and conducting diagnostic tests.
-	GWmodel: For calibrating the geographically weighted family of models, including GWR.
-	corrplot: For visualising and analysing multivariate data through correlation plots.

```{r}
pacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)
```

# 2. Importing & Transforming Data

We will import and work with two datasets:

- **URA's 2014 master plan subzone boundary**
- **Condominium resale prices 2015**

::: panel-tabset
## 1. Importing master plan subzone
The geospatial objects are multipolygon features in svy21 projected coordinates systems.
```{r}
mpsz = st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```
## 2. Projection transformation
We use `st_transform()` to assign the correct ESPG code 3414.
```{r}
mpsz_svy21 <- st_transform(mpsz, 3414)
```

## 3. Check geospatial data
A check on the dataset using `st_crs()` shows that it is now in the correct projected coordinate system.
```{r}
st_crs(mpsz_svy21)
```

We use `st_bbox()` to check the extent of the geospatial sf dataframe. 
```{r}
st_bbox(mpsz_svy21) 
```

## 4. Import condo resale prices dataset
We import the condo resale prices dataset using `read_csv()`.
```{r}
condo_resale = read_csv("data/aspatial/Condo_resale_2015.csv")
glimpse(condo_resale)
```

## 5. Check aspatial dataset
We can use `head()` and `summary()` to examine the dataset.
```{r}
head(condo_resale$LONGITUDE) #see the data in XCOORD column
```

```{r}
head(condo_resale$LATITUDE) #see the data in YCOORD column
```

```{r}
summary(condo_resale)
```

## 6. Convert aspatial dataset to sf object
We use `st_as_sf()` to convert the aspatial dataset into an sf object, followed by `st_transform()` to project it into CRS EPSG of 3414.
```{r}
condo_resale.sf <- st_as_sf(condo_resale,
                            coords = c("LONGITUDE", "LATITUDE"),
                            crs=4326) %>%
  st_transform(crs=3414)
head(condo_resale.sf)
```
:::

# 3. Exploratory Data Analysis
We will use ggplot2 package to perform some EDA.

::: panel-tabset
## Selling price
The plot below displays the histogram of condominium selling prices. The distribution is right-skewed, indicating that a majority of units were sold at relatively lower prices.
```{r}
ggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +
  geom_histogram(bins=20, color="black", fill="light blue")
```

## Log selling price
The skewed distribution of selling prices could be normalised using log transformation.
```{r}
condo_resale.sf <- condo_resale.sf %>%
  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))
```

The distribution of log selling prices is less skewed after the transformation.
```{r}
ggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +
  geom_histogram(bins=20, color="black", fill="light blue")
```

## Histograms of multiple variables
Multiple histograms of the 12 variables could be plotted using ggarrange() from ggpubr package.
```{r}
#| code-fold: true
AREA_SQM <- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + 
  geom_histogram(bins=20, color="black", fill="light blue")

AGE <- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_CBD <- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_CHILDCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + 
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_ELDERLYCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_URA_GROWTH_AREA <- ggplot(data=condo_resale.sf, 
                               aes(x= `PROX_URA_GROWTH_AREA`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_HAWKER_MARKET <- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_KINDERGARTEN <- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_MRT <- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_PARK <- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_PRIMARY_SCH <- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_TOP_PRIMARY_SCH <- ggplot(data=condo_resale.sf, 
                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

ggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, 
          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,
          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  
          ncol = 3, nrow = 4)
```

## Statistical Point Map
We plot the geospatial distribution of condominium resale prices using `tmap`.
```{r}
mpsz_svy21 <- st_make_valid(mpsz_svy21)

tmap_mode("view")
tm_shape(mpsz_svy21)+
  tm_polygons() +
  tm_shape(condo_resale.sf) +
  tm_dots(col = "SELLING_PRICE",
            alpha = 0.6,
            style="quantile")
  tm_view(set.zoom.limits = c(11,14))
tmap_mode("plot")
```

:::

# 4. Hedonic Pricing Modelling

## 4.1 Simple linear regression 
We build a simple linear regression model of selling price against area (square meter). 
The summary output reveals that the selling price is explained by the area (square meter) with the following formula: 
**Selling Price = -258121 + 14719 x Area**

This model has a R-square of 0.45, meaning that the independent variable could explain about 45% of the resale prices.
Since the p-value is < .05, we reject the null hypothesis and infer that the regression model is a good estimator of selling price.

Looking at the coefficients, both the intercept and the area (square meter) have p-values < .05, indicating that they are good parameter estimates.
```{r}
condo.slr <- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)
summary(condo.slr)
```
We plot the line of best fit against the scatter plot as follows:
```{r}
ggplot(data=condo_resale.sf,  
       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +
  geom_point() +
  geom_smooth(method = lm)
```

## 4.2 Visualise relationships of independent variables
Before building a multiple regression model, it is crucial to check that the independent variables are not highly correlated. Using highly correlated variables can lead to multicollinearity, which compromises model quality. A correlation matrix is a common tool for visualising relationships between independent variables.

Matrix reordering is crucial for uncovering hidden structures and patterns. In `corrplot`, the four reordering methods available (AOE, FPC, hclust, alphabet) help achieve this. We applied the **AOE method**, which orders variables using the angular order of eigenvectors (as suggested by Michael Friendly).

From the matrix, Freehold is highly correlated with LEASE_99YEAR. To avoid multicollinearity, only one should be included in the model, and LEASE_99YEAR is excluded.

```{r}
corrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = "AOE",
         tl.pos = "td", tl.cex = 0.5, method = "number", type = "upper")
```

## 4.3 Using MLR to build hedonic pricing model 
A multiple linear regression model is used to build the hedonic pricing model.
The summary report reveals that not all the independent variables are statistically significant. 
```{r}
condo.mlr <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + 
                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +
                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + 
                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + 
                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + 
                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, 
                data=condo_resale.sf)
summary(condo.mlr)
```

## 4.4 Refining the hedonic pricing model
We will remove those variables that are not statistically significant and rebuild the MLR model. This time round, we will use `ols_regress()` to generate publication quality report.
```{r}
condo.mlr1 <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + 
                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +
                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + 
                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + 
                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,
                 data=condo_resale.sf)
ols_regress(condo.mlr1)
```

## 4.5 `gtsummary` publication quality report
We can also use `gtsummary` package to generate publication quality report.
```{r}
tbl_regression(condo.mlr1, intercept = TRUE)
```

Additional notes or model statistics could be appended to the table using `add_glance_source_note()` or `add_glance_table()`, respectively.
```{r}
tbl_regression(condo.mlr1, 
               intercept = TRUE) %>% 
  add_glance_source_note(
    label = list(sigma ~ "\U03C3"),
    include = c(r.squared, adj.r.squared, 
                AIC, statistic,
                p.value, sigma))
```

## 4.6 Checking assumptions
We will now check if any assumptions of MLR have been violated as follows:

::: panel-tabset
### Multicollinearity
The following code checks for signs of multicollinearity. Since the Variance Inflation Factor (VIF) for all independent variables is below 10, we can conclude that there is no multicollinearity present.
```{r}
ols_vif_tol(condo.mlr1)
```

### Non-linearity
It is important to test the assumption of linearity and additivity in the relationship between the dependent and independent variables. The figure shows that most data points are scattered around the zero line, indicating that the relationships between the dependent and independent variables are linear.
```{r}
ols_plot_resid_fit(condo.mlr1)
```

### Normality of residuals
The following checks that the residuals of MLR have a normal distribution. `ols_test_normality()` conducts statistical test on the normality of the residuals. The summary table reveals that the p-values of the four tests are way smaller than the alpha value of 0.05. Hence we will reject the null hypothesis and infer that there is statistical evidence that the residual are not normally distributed.
```{r}
ols_plot_resid_hist(condo.mlr1)
```

```{r}
ols_test_normality(condo.mlr1)
```
:::

## 4.7 Testing for spatial autocorrelation

```{r}
mlr.output <- as.data.frame(condo.mlr1$residuals)
```

```{r}
condo_resale.res.sf <- cbind(condo_resale.sf, 
                        condo.mlr1$residuals) %>%
rename(`MLR_RES` = `condo.mlr1.residuals`)
```

```{r}
condo_resale.sp <- as_Spatial(condo_resale.res.sf)
condo_resale.sp
```

```{r}
tmap_mode("view")
tm_shape(mpsz_svy21)+
  tmap_options(check.and.fix = TRUE) +
  tm_polygons(alpha = 0.4) +
tm_shape(condo_resale.res.sf) +  
  tm_dots(col = "MLR_RES",
          alpha = 0.6,
          style="quantile") +
  tm_view(set.zoom.limits = c(11,14))
tmap_mode("plot")
```

```{r}
nb <- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)
summary(nb)
```

```{r}
nb_lw <- nb2listw(nb, style = 'W')
summary(nb_lw)
```

```{r}
lm.morantest(condo.mlr1, nb_lw)
```

# 5. Using GWmodel to Build Hedonic Pricing Models

## 5.1 Fixed bandwidth GWR model
```{r}
bw.fixed <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + 
                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + 
                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + 
                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + 
                     FAMILY_FRIENDLY + FREEHOLD, 
                   data=condo_resale.sp, 
                   approach="CV", 
                   kernel="gaussian", 
                   adaptive=FALSE, 
                   longlat=FALSE)
```

9.1.2
```{r}
gwr.fixed <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + 
                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + 
                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + 
                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + 
                         FAMILY_FRIENDLY + FREEHOLD, 
                       data=condo_resale.sp, 
                       bw=bw.fixed, 
                       kernel = 'gaussian', 
                       longlat = FALSE)
gwr.fixed
```

## 5.2 Adaptive bandwidth GWR model
```{r}
bw.adaptive <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + 
                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + 
                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + 
                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + 
                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, 
                      data=condo_resale.sp, 
                      approach="CV", 
                      kernel="gaussian", 
                      adaptive=TRUE, 
                      longlat=FALSE)
```

9.2.2
```{r}
gwr.adaptive <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + 
                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + 
                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + 
                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + 
                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, 
                          data=condo_resale.sp, bw=bw.adaptive, 
                          kernel = 'gaussian', 
                          adaptive=TRUE, 
                          longlat = FALSE)
gwr.adaptive
```

## 5.3 Visualising SDF
```{r}
condo_resale.sf.adaptive <- st_as_sf(gwr.adaptive$SDF) %>%
  st_transform(crs=3414)
```

```{r}
condo_resale.sf.adaptive.svy21 <- st_transform(condo_resale.sf.adaptive, 3414)
condo_resale.sf.adaptive.svy21  
```

```{r}
gwr.adaptive.output <- as.data.frame(gwr.adaptive$SDF)
condo_resale.sf.adaptive <- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))
glimpse(condo_resale.sf.adaptive)
```

```{r}
summary(gwr.adaptive$SDF$yhat)
```

## 5.4 Visualising local R2
```{r}
tmap_mode("view")
tm_shape(mpsz_svy21)+
  tm_polygons(alpha = 0.1) +
tm_shape(condo_resale.sf.adaptive) +  
  tm_dots(col = "Local_R2",
          border.col = "gray60",
          border.lwd = 1) +
  tm_view(set.zoom.limits = c(11,14))
tmap_mode("plot")
```

## 5.5 Visualising coefficient estimates
```{r}
tmap_mode("view")
AREA_SQM_SE <- tm_shape(mpsz_svy21)+
  tm_polygons(alpha = 0.1) +
tm_shape(condo_resale.sf.adaptive) +  
  tm_dots(col = "AREA_SQM_SE",
          border.col = "gray60",
          border.lwd = 1) +
  tm_view(set.zoom.limits = c(11,14))

AREA_SQM_TV <- tm_shape(mpsz_svy21)+
  tm_polygons(alpha = 0.1) +
tm_shape(condo_resale.sf.adaptive) +  
  tm_dots(col = "AREA_SQM_TV",
          border.col = "gray60",
          border.lwd = 1) +
  tm_view(set.zoom.limits = c(11,14))

tmap_arrange(AREA_SQM_SE, AREA_SQM_TV, 
             asp=1, ncol=2,
             sync = TRUE)
tmap_mode("plot")
```

## 5.6 Visualising local R2 by URA planning region
```{r}
tm_shape(mpsz_svy21[mpsz_svy21$REGION_N=="CENTRAL REGION", ])+
  tm_polygons()+
tm_shape(condo_resale.sf.adaptive) + 
  tm_bubbles(col = "Local_R2",
           size = 0.15,
           border.col = "gray60",
           border.lwd = 1)
```
