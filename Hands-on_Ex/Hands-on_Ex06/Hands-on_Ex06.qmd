---
title: "Hands-on Ex 6"
subtitle: "Geographical Segmentation with Spatially Constrained Clustering Techniques"
author: "Stephen Tay"
date: "29 Sep 2024"
date-modified:  "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true 
---

# 1. Overview
In geobusiness and spatial policy, a key practice is the segmentation of markets or planning areas into homogeneous regions using multivariate data. This segmentation allows for more targeted planning, resource allocation, and policy-making. This exercise focuses on **delineating homogeneous regions using geographically referenced multivariate data**, employing two primary analytical techniques:

- Hierarchical cluster analysis
- Spatially constrained cluster analysis

In this hands-on exercise, we will apply these techniques to segment Shan State, Myanmar, into homogeneous regions based on various Information and Communication Technology (ICT) measures. These measures include the availability of radio, television, landline phones, mobile phones, computers, and internet access at home. By understanding the spatial distribution of these ICT indicators, we can gain insights into the region’s digital landscape and inform policy decisions.

A few new R packages required for geographical segmentation and analysis include:

- `rgdal` for spatial data handling 
- `coorplot`, `ggpubr`, `heatmaply`, `psych`, `GGally`: These packages are used for multivariate data visualisation
- `cluster`, `ClustGeo`, `factoextra`, `NbClust`: These packages facilitate cluster analysis.

```{r}
pacman::p_load(spdep, tmap, sf, ClustGeo, 
               ggpubr, cluster, factoextra, NbClust,
               heatmaply, corrplot, psych, tidyverse, GGally)
```

# 2. Importing & Transforming Data
Two datasets will be used in this hands-on exercise:

- **Myanmar Township Boundary Data**: A geospatial dataset in ESRI shapefile format that outlines the township boundaries of Myanmar
- **2014 Myanmar Population and Housing Census**: A CSV file containing township-level information from the 2014 census.

::: panel-tabset
## Myanmar Township Boundary
```{r}
shan_sf <- st_read(dsn = "data/geospatial", 
                   layer = "myanmar_township_boundaries") %>%
  filter(ST %in% c("Shan (East)", "Shan (North)", "Shan (South)")) %>%
  select(c(2:7))
```

```{r}
shan_sf
```

```{r}
glimpse(shan_sf)
```

## Myanmar Population and Housing Census
There are a total of 11 columns and 55 observations.
```{r}
ict <- read_csv("data/aspatial/Shan-ICT.csv")
```

```{r}
summary(ict)
```

## Creating New Variables
The values are measured as the number of households. Using these numbers directly can introduce bias, as townships with more households are likely to have higher counts for owning radios, TVs, etc. To address this, we calculate the penetration rate for six ICT variables:

- RADIO_PR: Radio Penetration Rate
- TV_PR: TV Penetration Rate
- LLPHONE_PR: Landline Phone Penetration Rate
- MPHONE_PR: Mobile Phone Penetration Rate
- COMPUTER_PR: Computer Penetration Rate
- INTERNET_PR: Home Internet Penetration Rate

```{r}
ict_derived <- ict %>%
  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>%
  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%
  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%
  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%
  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%
  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%
  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,
         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,
         `TT_HOUSEHOLDS`=`Total households`,
         `RADIO`=`Radio`, `TV`=`Television`, 
         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,
         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) 

summary(ict_derived)
```
:::


# 3. Exploratory Data Analysis

## 3.1 EDA using statistical graphics
We will be plotting the distribution of the variables.

::: panel-tabset
### Households with Radio
The top plot is a histogram of households with radios, illustrating the overall shape and distribution of the data (e.g., normal distribution, left or right skew). The bottom plot is a boxplot for the same data, highlighting potential outliers.
```{r}
ggplot(data=ict_derived, 
       aes(x=`RADIO`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")
```


```{r}
ggplot(data=ict_derived, 
       aes(x=`RADIO`)) +
  geom_boxplot(color="black", 
               fill="light blue")
```

### Radio Penetration Rate
Now, we will plot the radio penetration rate. The distribution of the penetration rate is less skewed and has fewer outliers compared to the number of households with radios. This is expected, as larger townships tend to have more households, leading to more extreme values.
```{r}
ggplot(data=ict_derived, 
       aes(x=`RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")
```


```{r}
ggplot(data=ict_derived, 
       aes(x=`RADIO_PR`)) +
  geom_boxplot(color="black", 
               fill="light blue")
```

### Histograms of all ICT penetration rates
The chart below displays histograms for each of the six ICT penetration rates.
```{r}
#| code-fold: true
radio <- ggplot(data=ict_derived, 
             aes(x= `RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

tv <- ggplot(data=ict_derived, 
             aes(x= `TV_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

llphone <- ggplot(data=ict_derived, 
             aes(x= `LLPHONE_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

mphone <- ggplot(data=ict_derived, 
             aes(x= `MPHONE_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

computer <- ggplot(data=ict_derived, 
             aes(x= `COMPUTER_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

internet <- ggplot(data=ict_derived, 
             aes(x= `INTERNET_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

ggarrange(radio, tv, llphone, mphone, computer, internet, 
          ncol = 3, 
          nrow = 2)
```

### Boxplots for all ICT penetration rates
The chart below displays boxplots for each of the six ICT penetration rates.
```{r}
#| code-fold: true
radio_boxplot <- ggplot(data=ict_derived, 
                        aes(x= `RADIO_PR`)) +
  geom_boxplot(color="black", fill="light blue")

tv_boxplot <- ggplot(data=ict_derived, 
                     aes(x= `TV_PR`)) +
  geom_boxplot(color="black", fill="light blue")

llphone_boxplot <- ggplot(data=ict_derived, 
                          aes(x= `LLPHONE_PR`)) +
  geom_boxplot(color="black", fill="light blue")

mphone_boxplot <- ggplot(data=ict_derived, 
                         aes(x= `MPHONE_PR`)) +
  geom_boxplot(color="black", fill="light blue")

computer_boxplot <- ggplot(data=ict_derived, 
                           aes(x= `COMPUTER_PR`)) +
  geom_boxplot(color="black", fill="light blue")

internet_boxplot <- ggplot(data=ict_derived, 
                           aes(x= `INTERNET_PR`)) +
  geom_boxplot(color="black", fill="light blue")

ggarrange(radio_boxplot, tv_boxplot, llphone_boxplot, 
          mphone_boxplot, computer_boxplot, internet_boxplot, 
          ncol = 3, 
          nrow = 2)
```
:::

## 3.2 EDA using choropleth map

::: panel-tabset
### Joining geospatial data with aspatial data
Before plotting the choropleth map, we need to join the ICT variables from the aspatial dataset to the Myanmar Township geospatial dataset. The `ict_derived` dataset is left-joined with the `shan_sf` dataset using the `TS_PCODE` key. We use `qtm()` to have a quick look at the distribution of Radio penetration rate.

```{r}
shan_sf <- left_join(shan_sf, 
                     ict_derived, by=c("TS_PCODE"="TS_PCODE"))

qtm(shan_sf, "RADIO_PR")
```

### Radio
The plot below shows the choropleth map of the total number of households in each town (left) and the number of households with radios (right). Towns with larger number of households are also showing higher number of radio ownership.
```{r}
TT_HOUSEHOLDS.map <- tm_shape(shan_sf) + 
  tm_fill(col = "TT_HOUSEHOLDS",
          n = 5,
          style = "jenks", 
          title = "Total households") + 
  tm_borders(alpha = 0.5) 

RADIO.map <- tm_shape(shan_sf) + 
  tm_fill(col = "RADIO",
          n = 5,
          style = "jenks",
          title = "Households w/ Radio") + 
  tm_borders(alpha = 0.5) 

tmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,
             asp=NA, ncol=2)
```

The plots below display a choropleth map of the total number of households in each township (left) and the radio penetration rate (right). We observe that higher penetration rates are found in areas with fewer households.
```{r}
tm_shape(shan_sf) +
    tm_polygons(c("TT_HOUSEHOLDS", "RADIO_PR"),
                style="jenks") +
    tm_facets(sync = TRUE, ncol = 2) +
  tm_legend(legend.position = c("right", "bottom"))+
  tm_layout(outer.margins=0, asp=0)
```
### TV
Below is the choropleth maps for Total Households, Households with TVs, and TV Penetration Rate.
```{r}
#| code-fold: true
TV.map <- tm_shape(shan_sf) + 
  tm_fill(col = "TV",
          n = 5,
          style = "jenks",
          title = "Households w/ TV") + 
  tm_borders(alpha = 0.5) 

TV_PR.map <- tm_shape(shan_sf) + 
  tm_fill(col = "TV_PR",
          n = 5,
          style = "jenks",
          title = "TV Penetration Rate") + 
  tm_borders(alpha = 0.5) 

tmap_arrange(TT_HOUSEHOLDS.map, TV.map, TV_PR.map,
             asp=NA, ncol=3)
```

### Landline Phone
Below is the choropleth maps for Total Households, Households with Landline Phones, and Landline Phone Penetration Rate.
```{r}
#| code-fold: true
LLPHONE.map <- tm_shape(shan_sf) + 
  tm_fill(col = "LLPHONE",
          n = 5,
          style = "jenks",
          title = "Households w/ Landline") + 
  tm_borders(alpha = 0.5) 

LLPHONE_PR.map <- tm_shape(shan_sf) + 
  tm_fill(col = "LLPHONE_PR",
          n = 5,
          style = "jenks",
          title = "Landline Penetration Rate") + 
  tm_borders(alpha = 0.5) 

tmap_arrange(TT_HOUSEHOLDS.map, LLPHONE.map, LLPHONE_PR.map,
             asp=NA, ncol=3)
```

### Mobile Phone
Below is the choropleth maps for Total Households, Households with Mobile Phones, and Mobile Phone Penetration Rate.
```{r}
#| code-fold: true
MPHONE.map <- tm_shape(shan_sf) + 
  tm_fill(col = "MPHONE",
          n = 5,
          style = "jenks",
          title = "Households w/ Mobile") + 
  tm_borders(alpha = 0.5) 

MPHONE_PR.map <- tm_shape(shan_sf) + 
  tm_fill(col = "MPHONE_PR",
          n = 5,
          style = "jenks",
          title = "Mobile Penetration Rate") + 
  tm_borders(alpha = 0.5) 

tmap_arrange(TT_HOUSEHOLDS.map, MPHONE.map, MPHONE_PR.map,
             asp=NA, ncol=3)
```

### Computer
Below is the choropleth maps for Total Households, Households with Computers, and Computer Penetration Rate.
```{r}
#| code-fold: true
COMPUTER.map <- tm_shape(shan_sf) + 
  tm_fill(col = "COMPUTER",
          n = 5,
          style = "jenks",
          title = "Households w/ Computer") + 
  tm_borders(alpha = 0.5) 

COMPUTER_PR.map <- tm_shape(shan_sf) + 
  tm_fill(col = "COMPUTER_PR",
          n = 5,
          style = "jenks",
          title = "Computer Penetration Rate") + 
  tm_borders(alpha = 0.5) 

tmap_arrange(TT_HOUSEHOLDS.map, COMPUTER.map, COMPUTER_PR.map,
             asp=NA, ncol=3)
```

### Home Internet
Below is the choropleth maps for Total Households, Households with Home Internet, and Internet Penetration Rate.
```{r}
#| code-fold: true
INTERNET.map <- tm_shape(shan_sf) + 
  tm_fill(col = "INTERNET",
          n = 5,
          style = "jenks",
          title = "Households w/ Internet") + 
  tm_borders(alpha = 0.5) 

INTERNET_PR.map <- tm_shape(shan_sf) + 
  tm_fill(col = "INTERNET_PR",
          n = 5,
          style = "jenks",
          title = "Internet Penetration Rate") + 
  tm_borders(alpha = 0.5) 

tmap_arrange(TT_HOUSEHOLDS.map, INTERNET.map, INTERNET_PR.map,
             asp=NA, ncol=3)
```
:::

## 3.3 Correlation Analysis
Before performing cluster analysis, it’s crucial to ensure that the clustering variables are not highly correlated. We use the `corrplot.mixed()` function from the `corrplot` package to visualise and analyse the correlations among the input variables.

The correlation plot above reveals that `COMPUTER_PR` and `INTERNET_PR` are highly correlated, suggesting that only one of these variables should be included in the cluster analysis.
```{r}
cluster_vars.cor = cor(ict_derived[,12:17])
corrplot.mixed(cluster_vars.cor,
         lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

# 4. Hierarchical Cluster Analysis
These are the steps to perform hierarchical clustering. 

## 4.1. Extract clustering variables
Since `COMPUTER_PR` and `INTERNET_PR` are highly correlated, we will just pick `COMPUTER_PR` over `INTERNET_PR`, along with the other 4 ICT variables.
```{r}
cluster_vars <- shan_sf %>%
  st_set_geometry(NULL) %>%
  select("TS.x", "RADIO_PR", "TV_PR", "LLPHONE_PR", "MPHONE_PR", "COMPUTER_PR")
head(cluster_vars,10)
```

We then update the row names to the town names. 
```{r}
row.names(cluster_vars) <- cluster_vars$"TS.x"
head(cluster_vars,10)
```

We can now delete the TS.x field.
```{r}
shan_ict <- select(cluster_vars, c(2:6))
head(shan_ict, 10)
```

## 4.2. Data Standardisation
We will compare min-max and z-score standardization to determine the most appropriate method for standardizing the input variables before cluster analysis. This step is essential to prevent bias toward variables with larger value ranges.

We use `normalize()` to do min-max standardization.
```{r}
shan_ict.std <- normalize(shan_ict)
summary(shan_ict.std)
```

We use `scale()` to do z-score standardization. Z-score standardisation method should only be used if we would assume all variables come from some normal distribution
```{r}
shan_ict.z <- scale(shan_ict)
describe(shan_ict.z)
```

## 4.3. Visualise standardised clustering variables
It is good practice to visualise the distributions of the standardised variables. From the visualisation, it is clear that landline phone, mobile phone and computer penetration rates have non-normal distributions.

::: panel-tabset
### Radio
```{r}
#| code-fold: true
r <- ggplot(data=ict_derived, 
             aes(x= `RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Raw values without standardisation")

shan_ict_s_df <- as.data.frame(shan_ict.std)
s <- ggplot(data=shan_ict_s_df, 
       aes(x=`RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Min-Max Standardisation")

shan_ict_z_df <- as.data.frame(shan_ict.z)
z <- ggplot(data=shan_ict_z_df, 
       aes(x=`RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Z-score Standardisation")

ggarrange(r, s, z,
          ncol = 3,
          nrow = 1)
```


```{r}
#| code-fold: true
r <- ggplot(data=ict_derived, 
             aes(x= `RADIO_PR`)) +
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Raw values without standardisation")

shan_ict_s_df <- as.data.frame(shan_ict.std)
s <- ggplot(data=shan_ict_s_df, 
       aes(x=`RADIO_PR`)) +
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Min-Max Standardisation")

shan_ict_z_df <- as.data.frame(shan_ict.z)
z <- ggplot(data=shan_ict_z_df, 
       aes(x=`RADIO_PR`)) +
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Z-score Standardisation")

ggarrange(r, s, z,
          ncol = 3,
          nrow = 1)
```

### TV
```{r}
#| code-fold: true
r <- ggplot(data=ict_derived, 
             aes(x= `TV_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Raw values without standardisation")

s <- ggplot(data=shan_ict_s_df, 
       aes(x=`TV_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Min-Max Standardisation")

z <- ggplot(data=shan_ict_z_df, 
       aes(x=`TV_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Z-score Standardisation")

rd <- ggplot(data=ict_derived, 
             aes(x= `TV_PR`)) +
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Raw values without standardisation")

sd <- ggplot(data=shan_ict_s_df, 
       aes(x=`TV_PR`)) +
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Min-Max Standardisation")

zd <- ggplot(data=shan_ict_z_df, 
       aes(x=`TV_PR`)) +
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Z-score Standardisation")

ggarrange(r, s, z, rd, sd, zd,
          ncol = 3,
          nrow = 2)
```
### Landline Phone
```{r}
#| code-fold: true
r <- ggplot(data=ict_derived, 
             aes(x= `LLPHONE_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Raw values without standardisation")

s <- ggplot(data=shan_ict_s_df, 
       aes(x=`LLPHONE_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Min-Max Standardisation")

z <- ggplot(data=shan_ict_z_df, 
       aes(x=`LLPHONE_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Z-score Standardisation")

rd <- ggplot(data=ict_derived, 
             aes(x= `LLPHONE_PR`)) +
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Raw values without standardisation")

sd <- ggplot(data=shan_ict_s_df, 
       aes(x=`LLPHONE_PR`)) +
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Min-Max Standardisation")

zd <- ggplot(data=shan_ict_z_df, 
       aes(x=`LLPHONE_PR`)) +
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Z-score Standardisation")

ggarrange(r, s, z, rd, sd, zd,
          ncol = 3,
          nrow = 2)
```
### Mobile Phone
```{r}
#| code-fold: true
r <- ggplot(data=ict_derived, 
             aes(x= `MPHONE_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Raw values without standardisation")

s <- ggplot(data=shan_ict_s_df, 
       aes(x=`MPHONE_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Min-Max Standardisation")

z <- ggplot(data=shan_ict_z_df, 
       aes(x=`MPHONE_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Z-score Standardisation")

rd <- ggplot(data=ict_derived, 
             aes(x= `MPHONE_PR`)) +
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Raw values without standardisation")

sd <- ggplot(data=shan_ict_s_df, 
       aes(x=`MPHONE_PR`)) +
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Min-Max Standardisation")

zd <- ggplot(data=shan_ict_z_df, 
       aes(x=`MPHONE_PR`)) +
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Z-score Standardisation")

ggarrange(r, s, z, rd, sd, zd,
          ncol = 3,
          nrow = 2)
```
### Computer
```{r}
#| code-fold: true
r <- ggplot(data=ict_derived, 
             aes(x= `COMPUTER_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Raw values without standardisation")

s <- ggplot(data=shan_ict_s_df, 
       aes(x=`COMPUTER_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Min-Max Standardisation")

z <- ggplot(data=shan_ict_z_df, 
       aes(x=`COMPUTER_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Z-score Standardisation")

rd <- ggplot(data=ict_derived, 
             aes(x= `COMPUTER_PR`)) +
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Raw values without standardisation")

sd <- ggplot(data=shan_ict_s_df, 
       aes(x=`COMPUTER_PR`)) +
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Min-Max Standardisation")

zd <- ggplot(data=shan_ict_z_df, 
       aes(x=`COMPUTER_PR`)) +
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Z-score Standardisation")

ggarrange(r, s, z, rd, sd, zd,
          ncol = 3,
          nrow = 2)
```
:::


## 4.4 Compute proximity matrix
We use the `dist()` function to compute the euclidean distance matrix of the min-max standardised input variables.

```{r}
proxmat <- dist(shan_ict.std, method = 'euclidean')
proxmat
```

## 4.5 Compute hierarchical clustering
We use the `hclust()` function to conduct the agglomerative hierarchical clustering. The `ward.D` method is used in this instance. The dendrogram is plotted below.

```{r}
hclust_ward <- hclust(proxmat, method = 'ward.D')
plot(hclust_ward, cex = 0.6)
```

## 4.6 Select optimal clustering algorithm
A key challenge in hierarchical clustering is identifying strong clustering structures. The `agnes()` function from the `cluster` package computes the agglomerative coefficient, with values closer to 1 indicating a stronger clustering structure. Using `agnes()` and `map_dbl()` together, we could compute the coefficients for all hierarchical clustering algorithms. Ward's method has the highest agglomerative coefficient.

```{r}
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")

ac <- function(x) {
  agnes(shan_ict, method = x)$ac
}

map_dbl(m, ac)
```

## 4.7 Determine Optimal Clusters
There are three methods to determine the optimal number of clusters:

- Elbow method
- Average silhouette method
- Gap statistic method

We will use the gap statistic method, which compares the total intra-cluster variation for different values of k to what would be expected under a random uniform distribution. The optimal number of clusters is the value of k that maximizes the gap statistic, indicating that the clustering structure is significantly different from random noise. 

The `clusGap()` function of the `cluster` package and the `hcut()` function of the `factoextra` package are used.

```{r}
set.seed(12345)
gap_stat <- clusGap(shan_ict, 
                    FUN = hcut, 
                    nstart = 25, 
                    K.max = 10, 
                    B = 50)
# Print the result
print(gap_stat, method = "firstmax")
```

The gap statistic is plotted below using the `fviz_gap_stat()` function from the `factoextra` package. The plot initially suggests retaining 1 cluster, which is not practical. Therefore, we select 6 clusters, as it yields the next highest gap statistic.

```{r}
fviz_gap_stat(gap_stat)
```

## 4.8 Interpret the dendrogram
In the dendrogram, each leaf represents an observation. Moving up the tree, similar observations are merged into branches, which are then combined at higher levels.

The height of each fusion, shown on the vertical axis, indicates the (dis)similarity between observations. A greater fusion height means the observations are less similar. It’s important to note that the similarity of two observations is determined solely by the height at which their branches first merge, not by their proximity along the horizontal axis.

The plot below shows dendrogram with the 6 clusters.

```{r}
plot(hclust_ward, cex = 0.6)
rect.hclust(hclust_ward, 
            k = 6, 
            border = 2:5)
```

## 4.9 Visually-driven hierarchical clustering analysis
We could also perform a visually-driven hierarchical clustering by using the `heatmaply` package.

::: panel-tabset
### 1. Transform the dataframe into a matrix
First, we need to transform the dataframe into a matrix.
```{r}
shan_ict_mat <- data.matrix(shan_ict.std)
```

### 2. Plot interactive cluster heatmap
An interactive cluster heatmap is plotted using the `heatmaply()` function.
```{r}
heatmaply(normalize(shan_ict_mat),
          Colv=NA,
          dist_method = "euclidean",
          hclust_method = "ward.D",
          seriate = "OLO",
          colors = Blues,
          k_row = 6,
          margins = c(NA,200,60,NA),
          fontsize_row = 4,
          fontsize_col = 5,
          main="Geographic Segmentation of Shan State by ICT indicators",
          xlab = "ICT Indicators",
          ylab = "Townships of Shan State"
          )
```
:::

## 4.10 Visualise the clusters in choropleth map
To map the 6 clusters, we need to:

- Use `cuttree()` to extract the assignment to the six clusters.
- Convert the groups into a matrix 
- Append the groupings to `shan_sf` dataframe
- Rename the group field.
- Use `qtm()` to plot the six clusters.

The choropleth map shows that the clusters are highly fragmented. This is a major limitation of using non-spatial clustering algorithms, such as hierarchical cluster analysis.
```{r}
groups <- as.factor(cutree(hclust_ward, k = 6))

shan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`CLUSTER`=`as.matrix.groups.`)

qtm(shan_sf_cluster, "CLUSTER")
```


# 5. Spatially Constrained Clustering: SKATER method
In this section, we will derive spatially constrained cluster by using `skater()` method of `spdep` package. These are the steps to perform it.

## 5.1 Convert into SpatialPolygonsDataFrame
First, we need to convert `shan_sf` into SpatialPolygonsDataFrame, as the `skater()` function only supports sp objects.

```{r}
shan_sp <- as_Spatial(shan_sf)
```

## 5.2 Compute Neighbour List
The `poly2nd()` of spdep package will be used to compute the neighbours list.
```{r}
shan.nb <- poly2nb(shan_sp)
summary(shan.nb)
```

We can plot the neighbor list by performing these steps:

- Compute the centroids of each town
- Plot the Myanmar township boundaries
- Plot the network of neighbours
```{r}
coords <- st_coordinates(
  st_centroid(st_geometry(shan_sf)))

plot(st_geometry(shan_sf), 
     border=grey(.5))
plot(shan.nb,
     coords, 
     col="blue", 
     add=TRUE)
```


## 5.3 Compute edge cost
The `nbcosts()` function from the `spdep` package calculates the cost of each edge, representing the distance between nodes, using a data frame of observation vectors for each node.

This provides the pairwise dissimilarity between each observation’s values across the five variables and those of its neighboring observations (from the neighbor list). Essentially, this acts as a generalized weight for the spatial weights matrix.

We then incorporate these costs into a weights object, similar to how we calculated inverse distance weights. This involves converting the neighbor list into a list weights object, using the computed costs (`lcost`) as the weights.

To do this, we use the `nb2listw()` function from the `spdep` package, specifying the style as “B” to ensure that the cost values are not row-standardized.

```{r}
lcosts <- nbcosts(shan.nb, shan_ict.std)

shan.w <- nb2listw(shan.nb, 
                   lcosts, 
                   style="B")
summary(shan.w)
```



## 5.4 Compute minimum spanning tree
The minimum spanning tree is computed using the `mstree()` of `spdep` package. 
```{r}
shan.mst <- mstree(shan.w)
class(shan.mst)
```

There are 54 dimensions instead of 55 because a minimum spanning tree has n-1 edges to connect all the nodes.
```{r}
dim(shan.mst)
```

The content of shan.mst is shown below.
```{r}
head(shan.mst)
```

The plot below displays the minimum spanning tree, illustrating how the initial neighbor list is simplified to a single edge connecting each node while still passing through all nodes.
```{r}
plot(st_geometry(shan_sf), 
                 border=gray(.5))
plot.mst(shan.mst, 
         coords, 
         col="blue", 
         cex.lab=0.7, 
         cex.circles=0.005, 
         add=TRUE)
```

## 5.5 Compute spatially constrained clusters using SKATER method
The spatially constrained clusters are computed using the `skater()` function from the `spdep` package. This function requires three mandatory arguments:

- The first two columns of the MST matrix (excluding the cost).
- The data matrix (used to update costs as units are grouped).
- The number of cuts, which is set to one less than the desired number of clusters.

Note: The specified value represents the number of cuts in the graph, not the number of clusters. Therefore, it should be one less than the total number of clusters you want.

```{r}
clust6 <- spdep::skater(edges = shan.mst[,1:2], 
                 data = shan_ict, 
                 method = "euclidean", 
                 ncuts = 5)
str(clust6)
```

The cluster assignments are as follows:
```{r}
ccs6 <- clust6$groups
ccs6
```

This table shows the number of towns in each cluster:
```{r}
table(ccs6)
```

The 6 clusters are as follows:
```{r}
plot(st_geometry(shan_sf), 
     border=gray(.5))
plot(clust6, 
     coords, 
     cex.lab=.7,
     groups.colors=c("red","green","blue", "brown", "pink"),
     cex.circles=0.005, 
     add=TRUE)
```

## 5.6 Visualise the clusters in choropleth map
The newly derived clusters are plotted below:
```{r}
groups_mat <- as.matrix(clust6$groups)
shan_sf_spatialcluster <- shan_sf_cluster %>% 
  cbind(as.factor(groups_mat)) %>%
  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)
qtm(shan_sf_spatialcluster, "SP_CLUSTER")
```

The plot below compares the clusters generated by hierarchical clustering with those obtained using the skater approach.
```{r}
hclust.map <- qtm(shan_sf_cluster,
                  "CLUSTER") + 
  tm_borders(alpha = 0.5) 

shclust.map <- qtm(shan_sf_spatialcluster,
                   "SP_CLUSTER") + 
  tm_borders(alpha = 0.5) 

tmap_arrange(hclust.map, shclust.map,
             asp=NA, ncol=2)
```

# 6. Spatially Constrained Clustering: ClustGeo Method
In this section, we will derive spatially constrained cluster by using `ClustGeo` package. These are the steps to perform it.

## 6.1 Ward-like hierarchical clustering: ClustGeo
ClustGeo package provides the `hclustgeo()` function to perform a typical Ward-like hierarchical clustering. To perform non-spatially constrained hierarchical clustering, we only need to provide a dissimilarity matrix as derived in section 4.4.

```{r}
nongeo_cluster <- hclustgeo(proxmat)
plot(nongeo_cluster, cex = 0.5)
rect.hclust(nongeo_cluster, 
            k = 6, 
            border = 2:5)
```

The choropleth map allows us to visualise the clusters.
```{r}
groups <- as.factor(cutree(nongeo_cluster, k=6))
shan_sf_ngeo_cluster <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`CLUSTER` = `as.matrix.groups.`)
qtm(shan_sf_ngeo_cluster, "CLUSTER")
```

## 6.2 Spatially Constrained Hierarchical Clustering
A spatial distance matrix is derived using the `st_distance()` function from the `sf` package. Then, `as.dist()` is used to convert the data frame into a matrix.
```{r}
dist <- st_distance(shan_sf, shan_sf)
distmat <- as.dist(dist)
```

The choicealpha() function is then used to determine an appropriate value for the mixing parameter, alpha. 
```{r}
cr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)
```

Based on the chart, we will use alpha = 0.4 in the spatially constrained hierarchical clustering.
```{r}
clustG <- hclustgeo(proxmat, distmat, alpha = 0.4)
```

To visualize the clusters, we follow steps similar to those in Section 4.10:

- Use `cuttree()` to extract the six cluster assignments.
- Convert the groups into a matrix.
- Append the groupings to the shan_sf dataframe.
- Rename the grouping field.
- Use `qtm()` to plot the six clusters.

```{r}
groups <- as.factor(cutree(clustG, k=6))

shan_sf_Gcluster <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`CLUSTER` = `as.matrix.groups.`)

qtm(shan_sf_Gcluster, "CLUSTER")
```

# 7. Visual Interpretation of Clusters
There are two ways to visualise the clustering variables of each cluster:

::: panel-tabset
## Visualise individual clustering variable
The boxplot below reveal the distribution of the radio penetration rate by cluster. Cluster 2 displays the highest median radio penetration rate, followed by clusters 4, 1, 3, 5 and 6.
```{r}
ggplot(data = shan_sf_ngeo_cluster,
       aes(x = CLUSTER, y = RADIO_PR)) +
  geom_boxplot()
```

## Multivariate Visualisation
A parallel coordinate plot is an effective way to reveal the distribution of multiple clustering variables by cluster. 

The parallel coordinate plot shows that households in Cluster 4 townships tend to have the highest ownership of TVs and mobile phones. In contrast, households in Cluster 5 have the lowest ownership across all five ICT measures.

```{r}
ggparcoord(data = shan_sf_ngeo_cluster, 
           columns = c(17:21), 
           scale = "globalminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of ICT Variables by Cluster") +
  facet_grid(~ CLUSTER) + 
  theme(axis.text.x = element_text(angle = 30))
```

Summary statistics (such as mean, median, and standard deviation) provide a valuable complement to visual interpretation.
```{r}
shan_sf_ngeo_cluster %>% 
  st_set_geometry(NULL) %>%
  group_by(CLUSTER) %>%
  summarise(mean_RADIO_PR = mean(RADIO_PR),
            mean_TV_PR = mean(TV_PR),
            mean_LLPHONE_PR = mean(LLPHONE_PR),
            mean_MPHONE_PR = mean(MPHONE_PR),
            mean_COMPUTER_PR = mean(COMPUTER_PR))
```
:::

