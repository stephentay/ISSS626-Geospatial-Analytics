---
title: "Hands-on Ex 1B"
subtitle: "Thematic Mapping and GeoVisualisation with R"
author: "Stephen Tay"
date: "24 Aug 2024"
---

# 1. Overview
This exercise will perform thematic mapping and geovisualisation of choropleth maps using the **tmap** package in R.

**Thematic mapping** is the use of map symbols to visualize selected properties of geographic features that are not naturally visible, such as population, temperature, crime rate, and property prices.

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

# 2. Importing & Transforming Data
## 2.1 Importing Data
We will be importing 2 datasets:

- Master Plan 2014 Subzone Boundary (Web) from data.gov.sg
- Population data of Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 from Department of Statistics, Singapore

::: panel-tabset
## Master Plan 2014 Subzone Boundary
```{r}
mpsz <- st_read(dsn = "data/geospatial", 
                layer = "MP14_SUBZONE_WEB_PL")
```

```{r}
mpsz
```

## Population data
This is an aspatial data file. Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.
```{r}
popdata <- read_csv("data/aspatial/respopagesextod2011to2020.csv")
```
:::

## 2.2 Transforming Data
We are preparing a data table with year 2020 values, including the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY. Here are some definitions to note:

- YOUNG: age group 0-4 until age group 20-24,
- ECONOMY ACTIVE: age group 25-29 until age group 60-64,
- AGED: age group 65 and above,
- TOTAL: all age groups, and
- DEPENDENCY: the ratio between young and aged against economy active group

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup()%>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[12])) %>%
  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+rowSums(.[13:15])) %>%
  mutate(`AGED`=rowSums(.[16:21])) %>%
  mutate(`TOTAL`=rowSums(.[3:21])) %>%  
  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, `ECONOMY ACTIVE`, 
         `AGED`, `TOTAL`, `DEPENDENCY`)
```

Data cleaning to ensure PA and SZ fields are uppercase so that it can be joined to `mpsz` table using `SUBZONE_N` and `SZ` as the common identifier.
```{r}
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = list(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)

mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))
```

Save to RDS file.
```{r}
write_rds(mpsz_pop2020, "data/rds/mpszpop2020.rds")
```

# 3. Choropleth Mapping
**Choropleth mapping** involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. There are two approaches:

::: panel-tabset
## `qtm()`
**Plot a thematic map quickly, using good default visualisation.**
```{r}
tmap_mode("plot")
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY")
```

## Customised thematic map using `tmap` elements
**Allows drawing of highly customisable and high quality cartographic choropleth map.**
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```
:::

# 4. `tmap` elements and functions
Some important `tmap` elements and functions are as follows:

::: panel-tabset
## Drawing a base map
In the code chunk below, `tm_shape()` is used to define the input data (i.e mpsz_pop2020) and `tm_polygons()` is used to draw the planning subzone polygons
```{r}
tm_shape(mpsz_pop2020) +
  tm_polygons()
```

## Drawing choropleth map with `tm_polygons()`
To draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to `tm_polygons()`.

The default interval binning used to draw the choropleth map is called “pretty”, and the default colour scheme used is `YlOrRd` of ColorBrewer. Missing value will be shaded in grey.
```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")
```

## Drawing choropleth map with `tm_fill()` and `tm_border()`
`tm_polygons()` is a wrapper of `tm_fill()` and `tm_border()`. `tm_fill()` shades the polygons by using the default colour scheme and `tm_borders()` adds the borders of the shapefile onto the choropleth map.
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY")
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY") +
  tm_borders(lwd = 0.1,  alpha = 1)
```
:::

# 5. Data Classification Methods
Most choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.

## 5.1 Using `tmap` built-in classification methods
**tmap** provides several data classification methods under the `style` argument, such as:

::: panel-tabset
## quantile
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5)
```

## equal
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5)
```
## jenks
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "jenks") +
  tm_borders(alpha = 0.5)
```
## sd
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "sd") +
  tm_borders(alpha = 0.5)
```

## pretty
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "pretty") +
  tm_borders(alpha = 0.5)
```

## hclust
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "hclust") +
  tm_borders(alpha = 0.5)
```

## fisher
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "fisher") +
  tm_borders(alpha = 0.5)
```
:::

## 5.2 Using customised breaks
For all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the `tm_fill()`. It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).

**Step 1**: Get some descriptive statistics on the variable before setting the break points.
```{r}
summary(mpsz_pop2020$DEPENDENCY)
```

**Step 2**: We set break points. Based on the results above, our breaks vector is c(0, 0.60, 0.70, 0.80, 0.90, 1.00)

**Step 3**: Plot it!
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(alpha = 0.5)
```

## 5.3 Varying the number of classes
In choropleth maps, you should not have less than 4 classes as you can't see the statistical distribution well. Ideally, you should have 5-10 classes. Also, you should not have too many classes or more than 8 shades of the same color as readers won't be able to differentiate the classes very well.

::: panel-tabset
## 2 classes
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 2,
          style = "quantile") +
  tm_borders(alpha = 0.5)
```

## 6 classes
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile") +
  tm_borders(alpha = 0.5)
```

## 10 classes
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 10,
          style = "quantile") +
  tm_borders(alpha = 0.5)
```

## 20 classes
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 20,
          style = "quantile") +
  tm_borders(alpha = 0.5)
```

## k classes based on Sturges' formula
**Sturges' formula** suggests the number of classes based on the number of values.
k = 1 + 3.32 * log n

where n = number of values, k = number of classes.

In this example, Sturges' formula suggests 19 classes which are too many.
```{r}
(k <- round(1 + 3.32 * log(n_distinct(mpsz_pop2020$DEPENDENCY)), 0))

tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = k,
          style = "quantile") +
  tm_borders(alpha = 0.5)
```
:::

# 6. Colour Scheme

::: panel-tabset
## Using ColourBrewer palette
We assign the preferred predefined colour ramps from the **RColorBrewer** in `tm_fill()`
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "Blues") +
  tm_borders(alpha = 0.5)
```

## Reversing the colour shading
Add a “-” prefix.
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "-Greens") +
  tm_borders(alpha = 0.5)
```
:::

# 7. Map Layouts
**Map layout** refers to the combination of all map elements into a cohensive map (e.g. the objects to be mapped, the title, the scale bar, the compass, margins, and aspects ratios).

::: panel-tabset
## Map Legend
Several legend options are provided to change the placement, format and appearance of the legend.
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "jenks", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

## Map Style
**tmap** allows a wide variety of layout settings to be changed. The one below is the classic style. 
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")
```

## Cartographic Furniture
You may draw other map furniture such as compass, scale bar and grid lines. Below, `tm_compass()`, `tm_scale_bar()` and `tm_grid()` are used to add compass, scale bar and grid lines onto the choropleth map.
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "No. of persons") +
  tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

## Resetting default style
```{r}
tmap_style("white")
```
:::


# 8. Drawing Small Multiple Choropleth Maps
In **tmap**, small multiple maps can be plotted in three ways:

::: panel-tabset
## 1. Assigning values to aesthetic argument(s)
In this example, small multiple choropleth maps are created by defining `ncols` in `tm_fill()`
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill(c("YOUNG", "AGED"),
          style = "equal", 
          palette = "Blues") +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) +
  tmap_style("white")
```

In this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments. 
```{r}
tm_shape(mpsz_pop2020)+ 
  tm_polygons(c("DEPENDENCY","AGED"),
          style = c("equal", "quantile"), 
          palette = list("Blues","Greens")) +
  tm_layout(legend.position = c("right", "bottom"))
```

## 2. Defining a group-by variable in `tm_facets()`
Multiple small choropleth maps can also be created using `tm_facets()`.
```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Blues",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", 
            free.coords=TRUE, 
            drop.shapes=TRUE) +
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)
```

## 3. Combining multiple standalone maps using `tmap_arrange()`
In this example, multiple standalone choropleth maps are created and then combined using `tmap_arrange()`.
```{r}
youngmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("YOUNG", 
              style = "quantile", 
              palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("AGED", 
              style = "quantile", 
              palette = "Blues")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```
:::

# 9. Mapping Spatial Object Meeting a Selection Criterion
Instead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.
```{r}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45, 
            legend.width = 5.0,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```


