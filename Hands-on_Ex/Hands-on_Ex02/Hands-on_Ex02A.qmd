---
title: "Hands-on Ex 2A"
subtitle: "1st Order Spatial Point Pattern Analysis Methods"
author: "Stephen Tay"
date: "31 Aug 2024"
date-modified:  "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true 
---

# 1. Overview

**Point pattern analysis** examines the spatial distribution of points and the underlying characteristics of these patterns. The properties of point patterns are typically categorised into two main types:

-   **First-order properties**: These focus on the distribution and variation of individual locations across space, assessing how the intensity of points varies over the study area.
-   **Second-order properties**: These consider the interactions between points, analyzing how points influence each other and how these interactions shape the overall pattern.

This exercise is centered on **first-order properties**. In general, density-based methods, such as kernel density estimation, primarily address first-order properties by examining the spatial intensity of points across the study area. In addition to the geospatial tools introduced in previous hands-on exercises, we will also utilize the `spatstat`, `raster`, and `maptools` packages.

```{r}
pacman::p_load(sf, spatstat, raster, maptools, tmap, tidyverse)
```

# 2. Importing & Transforming Data

We will be importing 3 datasets:

-   Locations of childcare centers from data.gov.sg
-   Master Plan 2014 Subzone Boundary (Web) from data.gov.sg
-   National Coastal Boundary of Singapore from Singapore Land Authority (SLA)

Since the original datasets were in geographic coordinate system or had incorrect projection system, we will need to transform them to the same projection system.

::: panel-tabset
## Childcare Centers

```{r}
childcare_sf <- st_read("data/geospatial/child-care-services-geojson.geojson") %>%
  st_transform(crs = 3414)
```

## Master Plan Subzone

```{r}
mpsz_sf <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL") %>%
  st_set_crs(3414)
st_crs(mpsz_sf)
```

## Coastal Boundary

```{r}
sg_sf <- st_read(dsn = "data/geospatial", layer="CostalOutline") %>%
  st_set_crs(3414)
st_crs(sg_sf)
```
:::

# 3. GeoVisualisation of Childcare Centers

It's important to take a look at the spatial patterns of the childcare centers.

::: panel-tabset
## Static map

```{r}
tm_shape(sg_sf) +
  tm_polygons() +
  tm_shape(mpsz_sf) +
  tm_polygons() +
  tm_shape(childcare_sf) +
  tm_dots(size = 0.01, alpha = 0.5)
```

## Interactive pin map

An interactive pin map allows for free navigation and zooming across the map. You can easily query information about each point by clicking on it. Additionally, you have the option to change the background layer of the map.

```{r}
tmap_mode('view')
tm_shape(childcare_sf)+
  tm_dots()
```

```{r}
tmap_mode('plot')
```
:::

# 4. Geospatial Data Wrangling

Many geospatial analysis packages require input data to be in the `Spatial class` from the sp package.

For our analysis, we only need to convert the childcare dataset into `ppp` format for use with the `spatstat` package. However, we will also demonstrate how to convert simple feature dataframes to other formats for your reference.

::: panel-tabset
## 4.1 Convert sf dataframe to sp’s `Spatial class`

```{r}
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)

class(childcare)
class(mpsz)
class(sg)
```

```{r}
childcare
```

```{r}
mpsz
```

```{r}
sg
```

## 4.2 Convert sp's `Spatial class` into generic sp format

```{r}
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
```

```{r}
childcare_sp
```

```{r}
sg_sp
```

## 4.3 Convert into spatstat's `ppp` format

Here, we convert the childcare dataset into `ppp` format. We will also plot it and show the summary statistics of the created `ppp` object.

```{r}
childcare_ppp <- as.ppp(childcare_sf)
childcare_ppp
```

```{r}
plot(childcare_ppp)
```

```{r}
summary(childcare_ppp)
```
:::

## 4.4 Handling duplicated points

::: panel-tabset
### Check for any duplicated points

```{r}
any(duplicated(childcare_ppp))
```

### Count the number of duplicated points

```{r}
sum(multiplicity(childcare_ppp) > 1)
```

### View locations of duplicated points

```{r}
tmap_mode('view')
tm_shape(childcare) +
  tm_dots(alpha=0.4, 
          size=0.05)
```

```{r}
tmap_mode('plot')
```

### Jittering approach

The simplest way to handle duplicated points is to delete them, but this approach may result in the loss of valuable data. Alternatively, you can use jittering, which applies a small perturbation to the duplicate points, ensuring they do not occupy the exact same location.

```{r}
childcare_ppp_jit <- rjitter(childcare_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
```

```{r}
any(duplicated(childcare_ppp_jit))
```

```{r}
sum(multiplicity(childcare_ppp_jit) > 1)
```
:::

## 4.5 Create `owin` object

When analyzing spatial point patterns, it is good practice to confine the analysis within a geographical boundary. This involves converting a spatial polygon into an `owin` object for use with the `spatstat` package later.

```{r}
sg_owin <- as.owin(sg_sf)
```

```{r}
plot(sg_owin)
```

```{r}
summary(sg_owin)
```

## 4.6 Combine `owin` object with point events

In this final step of geospatial data wrangling, we will **extract childcare events located within Singapore boundary** using the code chunk below. The resulting object combines both point and polygon features into a single `ppp` object.

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
summary(childcareSG_ppp)
```

```{r}
plot(childcareSG_ppp)
```

# 5. Kernel Density Estimation (KDE)

## 5.1 Introduction to KDE

The code chunk below computes kernel density using the following configurations in the `density()` function:

-   sigma: Specifies the automatic bandwidth selection method. Recommended methods are `bw.diggle`, `bw.ppl`, `bw.CvL`, or `bw.scott`.
-   kernel: Specifies the smoothing method to be used, e.g. "gaussian", “epanechnikov”, “quartic” or “disc”.
-   edge: If set to `TRUE`, the intensity estimate is corrected for edge effect bias using the method described by Jones (1993) and Diggle (2010, equation 18.9).

```{r}
kde_childcareSG_bw <- density(childcareSG_ppp,
                              sigma=bw.diggle,
                              kernel="gaussian",
                              edge=TRUE) 
```

This is how the KDE plot looks like. The density values in the output range from 0 to 0.00003, which is too small to easily interpret. This occurs because the default unit of measurement in the SVY21 coordinate system is meters. Consequently, the computed density values are in “number of points per square meter".

```{r}
plot(kde_childcareSG_bw)
```

To check the bandwidth used to compute the KDE layer, use the code chunk below.

```{r}
bw.diggle(childcareSG_ppp)
```

## 5.2 Rescaling KDE values

`rescale.ppp()` is used to convert the unit of measurement from meter to kilometer.

```{r}
childcareSG_ppp.km <- rescale.ppp(childcareSG_ppp, 1000, "km")
```

Notice that output image looks identical to the earlier version, the only changes in the data values (refer to the legend).

```{r}
kde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, kernel="gaussian", edge=TRUE)
plot(kde_childcareSG.bw)
```

## 5.3 Working with different automatic bandwidth methods

::: panel-tabset
### Bandwidth Calculation

Let's take a look at the bandwidth of the various automatic bandwidth methods.

```{r}
bw.diggle(childcareSG_ppp.km)
```

```{r}
bw.ppl(childcareSG_ppp.km)
```

```{r}
bw.CvL(childcareSG_ppp.km)
```

```{r}
bw.scott(childcareSG_ppp.km)
```

### Comparing KDEs of Various Automatic Bandwidth Methods

Here, we will compare the KDEs generated by various automatic bandwidth selection methods. Baddeley et al. (2016) recommend using the `bw.ppl` algorithm, as their experience shows it tends to produce more appropriate values when the point pattern consists predominantly of tight clusters.

```{r}
kde_childcareSG.ppl <- density(childcareSG_ppp.km, sigma=bw.ppl, kernel="gaussian", edge=TRUE)
kde_childcareSG.cvl <- density(childcareSG_ppp.km, sigma=bw.CvL, kernel="gaussian", edge=TRUE)
kde_childcareSG.sct <- density(childcareSG_ppp.km, sigma=bw.scott, kernel="gaussian", edge=TRUE)

par(mfrow=c(2,2))
plot(kde_childcareSG.bw, main = "bw.diggle")
plot(kde_childcareSG.ppl, main = "bw.ppl")
plot(kde_childcareSG.cvl, main = "bw.CvL")
plot(kde_childcareSG.sct, main = "bw.scott")
```
:::

## 5.4 Working with different kernel methods

By default, the kernel method used in density.ppp() is Gaussian. However, there are three other options available: Epanechnikov, Quartic, and Disc.

```{r}
par(mfrow=c(2,2))
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Gaussian")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")
```

## 5.5 Fixed and Adaptive KDE

You could also compute KDE using fixed or adaptive bandwidths.

::: panel-tabset
### Fixed bandwidth

Example: defining a bandwidth of 600 meter. Sigma value is 0.6, as the unit of measurement is kilometers.

```{r}
kde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG_600)
```

### Adapative bandwidth

The fixed bandwidth method is highly sensitive to skewed distributions of spatial point patterns, such as those found in urban versus rural areas. To address this issue, an adaptive bandwidth method can be used instead.

```{r}
kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method="kernel")
plot(kde_childcareSG_adaptive)
```

### Comparing fixed vs adapative KDE

```{r}
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "Fixed bandwidth")
plot(kde_childcareSG_adaptive, main = "Adaptive bandwidth")
```
:::

## 5.6 Convert KDE Output into Grid Object

We convert the KDE output so that it is suitable for mapping purposes.

::: panel-tabset
### 1. Convert to gridded kernal density objects

```{r}
gridded_kde_childcareSG_bw <- as.SpatialGridDataFrame.im(kde_childcareSG.bw)
spplot(gridded_kde_childcareSG_bw)
```

### 2. Convert gridded output to raster

Notice that the crs property is NA.

```{r}
kde_childcareSG_bw_raster <- raster(kde_childcareSG.bw)
kde_childcareSG_bw_raster
```

### 3. Assign projection system

The code chunk includes the CRS information onto the raster. Notice that the crs property is completed.

```{r}
projection(kde_childcareSG_bw_raster) <- CRS("+init=EPSG:3414")
kde_childcareSG_bw_raster
```

### 4. Visualise the output in tmap

Finally, we will display the raster in cartographic quality map using tmap package.

```{r}
tm_shape(kde_childcareSG_bw_raster) + 
  tm_raster("layer", palette = "viridis") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```
:::

## 5.7 Comparing KDEs by Planning Areas

In this section, we will compare KDE of childcare locations at Punggol, Tampines, Choa Chu Kang and Jurong West planning areas.

::: panel-tabset
### 1. Extracting area of study

```{r}
pg <- mpsz_sf %>%
  filter(PLN_AREA_N == "PUNGGOL")
tm <- mpsz_sf %>%
  filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_sf %>%
  filter(PLN_AREA_N == "CHOA CHU KANG")
jw <- mpsz_sf %>%
  filter(PLN_AREA_N == "JURONG WEST")
```

### 2A. Plotting Punggol

```{r}
plot(pg, main = "Punggol")
```

### 2B. Plotting Tampines

```{r}
plot(tm, main = "Tampines")
```

### 2C. Plotting Choa Chu Kang

```{r}
plot(ck, main = "Choa Chu Kang")
```

### 2D. Plotting Jurong West

```{r}
plot(jw, main = "Jurong West")
```

### 3. Creating `owin` object for each area

```{r}
pg_owin = as.owin(pg)
tm_owin = as.owin(tm)
ck_owin = as.owin(ck)
jw_owin = as.owin(jw)
```

### 4. Extracting childcare points for each area

```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

### 5. Rescaling unit of measurement

```{r}
childcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, "km")
```

### 6. Plotting childcare locations

```{r}
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

### 7A. Computing KDE using `bw.diggle`

```{r}
par(mfrow=c(2,2))
plot(density(childcare_pg_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tampines")
plot(density(childcare_ck_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Choa Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Jurong West")
```

### 7B. Computing KDE using fixed bandwidth

For comparison purposes, we use 250m as the bandwidth.

```{r}
par(mfrow=c(2,2))
plot(density(childcare_pg_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tampines")
plot(density(childcare_ck_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Choa Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Jurong West")
```
:::

# 6. Nearest Neighbor Analysis

In this section, we will conduct the Clark-Evans test for aggregation of a spatial point pattern using the `clarkevans.test()` function from `spatstat`.

The test hypotheses are as follows:

-   H0: The distribution of childcare locations is random.
-   H1: The distribution of childcare locations is not random.

A 95% confidence interval will be used.

::: panel-tabset
## Singapore

Are childcare centers in Singapore clustered? The p-value is less than the alpha value and there is sufficient evidence to reject the null hypothesis, suggesting that the childcare centers in Singapore are **clustered**.

```{r}
clarkevans.test(childcareSG_ppp,
                correction="none",
                clipregion="sg_owin",
                alternative=c("clustered"),
                nsim=99)
```

## Choa Chu Kang

Are childcare centers in CCK having clustered/regular pattern? The p-value is greater than the alpha value and there is insufficient evidence to reject the null hypothesis, suggesting that the childcare centers in CCK could be **CSR**.

```{r}
clarkevans.test(childcare_ck_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

## Tampines

Are childcare centers in Tampines having clustered/regular pattern? The p-value is less than the alpha value and there is sufficient evidence to reject the null hypothesis, suggesting that the childcare centers in Tampines could be having **clustered/regular pattern**.

```{r}
clarkevans.test(childcare_tm_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```
:::
