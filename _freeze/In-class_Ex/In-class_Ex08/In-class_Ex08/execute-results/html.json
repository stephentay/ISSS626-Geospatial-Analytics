{
  "hash": "d44d6d78ea000da58647ee8b4ea09988",
  "result": {
    "markdown": "---\ntitle: \"In-class Ex 8\"\nsubtitle: \"\"\nauthor: \"Stephen Tay\"\ndate: \"21 Oct 2024\"\ndate-modified:  \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  warning: false\n  freeze: true \n---\n\n\n# 1. Overview\nIn this exercise, we will focus on two main objectives:\n\n- **Retrieving Latitude and Longitude Coordinates for Singapore Addresses:** In the first part, we will walk through the steps to obtain geographical coordinates (latitude and longitude) for addresses in Singapore. This will involve using an API from Singapore Land Authority (SLA) to convert address data into spatial coordinates.\n- **Geospatial Predictive Modeling:** In the second part, we will learn alternative R packages in building geospatial predictive models.\n\n# 2. Retrieving Lat/Long Coordinates for SG Addresses\n\n::: panel-tabset\n## 2.1 R packages\nIn this exercise, we will be utilizing several important R packages:\n\n-\trvest: A package designed for web scraping, allowing us to easily extract data from HTML and XML web pages by providing functions to navigate and parse the web content.\n-\thttr: A package that simplifies working with HTTP requests and responses in R. It enables us to send HTTP requests to web servers, handle authentication, and manage cookies, making it useful for interacting with web APIs and accessing web resources that require more complex HTTP operations.\n-\tjsonlite: A package that provides a robust set of tools for working with JSON data in R. It allows us to parse JSON files and convert them into R data frames or lists, and also to serialize R objects into JSON format, facilitating the exchange of data between R and web applications or APIs that use JSON.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, sf, httr, jsonlite, rvest)\n```\n:::\n\n\n## 2.2 Data Transformation\n\n::: {.cell}\n\n```{.r .cell-code}\nresale <- read_csv(\"data/rawdata/resale.csv\") %>%\n  filter(month >= \"2023-01\" & month <= \"2024-09\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy <- resale %>%\n  mutate(address = paste(block,street_name)) %>%\n  mutate(remaining_lease_yr = as.integer(\n    str_sub(remaining_lease, 0, 2)))%>%\n  mutate(remaining_lease_mth = as.integer(\n    str_sub(remaining_lease, 9, 11)))\n```\n:::\n\n\nFor the purpose of this exercise, we will use a subset of the dataset for demonstration.\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_selected <- resale_tidy %>%\n  filter(month == \"2024-09\")\n```\n:::\n\n\n## 2.3 Removing duplicates\nWe use unique() to remove duplicates, and sort() to allow easy searching of addresses.\nsort is for easy searching of the data.\n\n::: {.cell}\n\n```{.r .cell-code}\nadd_list <- sort(unique(resale_selected$address))\n```\n:::\n\n\n## 2.4 Function for Reverse Geocoding\nWe will use SLA's API (https://www.onemap.gov.sg/apidocs/) to perform reverse geocoding.\nThe code chunk below defines a function for reverse geocoding.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_coords <- function(add_list){\n  \n  # Create a data frame to store all retrieved coordinates\n  postal_coords <- data.frame()\n    \n  for (i in add_list){\n    #print(i)\n\n    r <- GET('https://www.onemap.gov.sg/api/common/elastic/search?',\n           query=list(searchVal=i,\n                     returnGeom='Y',\n                     getAddrDetails='Y'))\n    data <- fromJSON(rawToChar(r$content))\n    found <- data$found\n    res <- data$results\n    \n    # Create a new data frame for each address\n    new_row <- data.frame()\n    \n    # If single result, append \n    if (found == 1){\n      postal <- res$POSTAL \n      lat <- res$LATITUDE\n      lng <- res$LONGITUDE\n      new_row <- data.frame(address= i, \n                            postal = postal, \n                            latitude = lat, \n                            longitude = lng)\n    }\n    \n    # If multiple results, drop NIL and append top 1\n    else if (found > 1){\n      # Remove those with NIL as postal\n      res_sub <- res[res$POSTAL != \"NIL\", ]\n      \n      # Set as NA first if no Postal\n      if (nrow(res_sub) == 0) {\n          new_row <- data.frame(address= i, \n                                postal = NA, \n                                latitude = NA, \n                                longitude = NA)\n      }\n      \n      else{\n        top1 <- head(res_sub, n = 1)\n        postal <- top1$POSTAL \n        lat <- top1$LATITUDE\n        lng <- top1$LONGITUDE\n        new_row <- data.frame(address= i, \n                              postal = postal, \n                              latitude = lat, \n                              longitude = lng)\n      }\n    }\n\n    else {\n      new_row <- data.frame(address= i, \n                            postal = NA, \n                            latitude = NA, \n                            longitude = NA)\n    }\n    \n    # Add the row\n    postal_coords <- rbind(postal_coords, new_row)\n  }\n  return(postal_coords)\n}\n```\n:::\n\n\n## 2.5 Reverse Geocoding\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- get_coords(add_list)\n```\n:::\n\n::: {.cell}\n\n:::\n\n:::\n\n# 3. Geospatial Predictive Modeling\nWe now move on to another topic on geospatial predictive modeling.\n\n## 3.1 R packages & Data Preparation\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, GWmodel, SpatialML, tmap, rsample, Metrics, tidyverse, kableExtra)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata <- read_rds(\"data/mdata.rds\")\n```\n:::\n\n\nWe split the dataset into training and testing sets, with the training set comprising 65% of the data. Please note that stratification was not applied during this train/test split. However, in geospatial predictive modeling, it is essential to incorporate stratification to ensure that samples from various locations are represented fairly and to avoid bias in the model.\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nresale_split <- initial_split(mdata,\n                              prop = 6.5/10)\ntrain_data <- training(resale_split)\ntest_data <- testing(resale_split)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## 3.2 Multicollinearity Check 1\nWe need to drop the geometry column before doing the correlation matrix.\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata_nogeo <- mdata %>%\n  st_drop_geometry()\nggstatsplot::ggcorrmat(mdata_nogeo[, 2:17])\n```\n\n::: {.cell-output-display}\n![](In-class_Ex08_files/figure-html/unnamed-chunk-14-1.png){width=1152}\n:::\n:::\n\n\n## 3.3 Building a Non-spatial MLR\n\n::: {.cell}\n\n```{.r .cell-code}\nprice_mlr <- lm(resale_price ~ floor_area_sqm + \n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL +\n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                data=train_data)\nolsrr::ols_regress(price_mlr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                              Model Summary                                \n--------------------------------------------------------------------------\nR                           0.859       RMSE                    61604.120 \nR-Squared                   0.737       MSE                3800583670.022 \nAdj. R-Squared              0.737       Coef. Var                  14.193 \nPred R-Squared              0.737       AIC                    257320.224 \nMAE                     47485.556       SBC                    257436.117 \n--------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares           DF       Mean Square       F          Sig. \n--------------------------------------------------------------------------------\nRegression    1.100899e+14           14      7.863561e+12     2069.04    0.0000 \nResidual      3.922202e+13        10320    3800583670.022                       \nTotal         1.493119e+14        10334                                         \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                 \n------------------------------------------------------------------------------------------------------------------\n                   model          Beta    Std. Error    Std. Beta       t        Sig          lower         upper \n------------------------------------------------------------------------------------------------------------------\n             (Intercept)    107601.073     10601.261                  10.150    0.000     86820.546    128381.599 \n          floor_area_sqm      2780.698        90.579        0.164     30.699    0.000      2603.146      2958.251 \n            storey_order     14299.298       339.115        0.234     42.167    0.000     13634.567     14964.029 \n    remaining_lease_mths       344.490         4.592        0.442     75.027    0.000       335.489       353.490 \n                PROX_CBD    -16930.196       201.254       -0.586    -84.124    0.000    -17324.693    -16535.700 \n        PROX_ELDERLYCARE    -14441.025       994.867       -0.079    -14.516    0.000    -16391.157    -12490.893 \n             PROX_HAWKER    -19265.648      1273.597       -0.083    -15.127    0.000    -21762.144    -16769.151 \n                PROX_MRT    -32564.272      1744.232       -0.105    -18.670    0.000    -35983.305    -29145.240 \n               PROX_PARK     -5712.625      1483.885       -0.021     -3.850    0.000     -8621.328     -2803.922 \n               PROX_MALL    -14717.388      2007.818       -0.044     -7.330    0.000    -18653.100    -10781.675 \n        PROX_SUPERMARKET    -26881.938      4189.624       -0.035     -6.416    0.000    -35094.414    -18669.462 \nWITHIN_350M_KINDERGARTEN      8520.472       632.812        0.072     13.464    0.000      7280.038      9760.905 \n   WITHIN_350M_CHILDCARE     -4510.650       354.015       -0.074    -12.741    0.000     -5204.589     -3816.711 \n         WITHIN_350M_BUS       813.493       222.574        0.020      3.655    0.000       377.205      1249.781 \n       WITHIN_1KM_PRISCH     -8010.834       491.512       -0.102    -16.298    0.000     -8974.293     -7047.376 \n------------------------------------------------------------------------------------------------------------------\n```\n:::\n:::\n\n\n## 3.4 VIF: Multicollinearity Check 2\n\n::: {.cell}\n\n```{.r .cell-code}\nvif <- performance::check_collinearity(price_mlr)\nkable(vif, caption = \"Variance Inflation Factor (VIF) Results\") %>%\n  kable_styling(font_size = 18)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"font-size: 18px; margin-left: auto; margin-right: auto;\">\n<caption style=\"font-size: initial !important;\">Variance Inflation Factor (VIF) Results</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Term </th>\n   <th style=\"text-align:right;\"> VIF </th>\n   <th style=\"text-align:right;\"> VIF_CI_low </th>\n   <th style=\"text-align:right;\"> VIF_CI_high </th>\n   <th style=\"text-align:right;\"> SE_factor </th>\n   <th style=\"text-align:right;\"> Tolerance </th>\n   <th style=\"text-align:right;\"> Tolerance_CI_low </th>\n   <th style=\"text-align:right;\"> Tolerance_CI_high </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> floor_area_sqm </td>\n   <td style=\"text-align:right;\"> 1.126308 </td>\n   <td style=\"text-align:right;\"> 1.104360 </td>\n   <td style=\"text-align:right;\"> 1.152871 </td>\n   <td style=\"text-align:right;\"> 1.061276 </td>\n   <td style=\"text-align:right;\"> 0.8878567 </td>\n   <td style=\"text-align:right;\"> 0.8673997 </td>\n   <td style=\"text-align:right;\"> 0.9055016 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> storey_order </td>\n   <td style=\"text-align:right;\"> 1.206586 </td>\n   <td style=\"text-align:right;\"> 1.181102 </td>\n   <td style=\"text-align:right;\"> 1.235657 </td>\n   <td style=\"text-align:right;\"> 1.098447 </td>\n   <td style=\"text-align:right;\"> 0.8287846 </td>\n   <td style=\"text-align:right;\"> 0.8092862 </td>\n   <td style=\"text-align:right;\"> 0.8466672 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> remaining_lease_mths </td>\n   <td style=\"text-align:right;\"> 1.363528 </td>\n   <td style=\"text-align:right;\"> 1.331762 </td>\n   <td style=\"text-align:right;\"> 1.398335 </td>\n   <td style=\"text-align:right;\"> 1.167702 </td>\n   <td style=\"text-align:right;\"> 0.7333919 </td>\n   <td style=\"text-align:right;\"> 0.7151363 </td>\n   <td style=\"text-align:right;\"> 0.7508850 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_CBD </td>\n   <td style=\"text-align:right;\"> 1.905054 </td>\n   <td style=\"text-align:right;\"> 1.852553 </td>\n   <td style=\"text-align:right;\"> 1.960788 </td>\n   <td style=\"text-align:right;\"> 1.380237 </td>\n   <td style=\"text-align:right;\"> 0.5249196 </td>\n   <td style=\"text-align:right;\"> 0.5099991 </td>\n   <td style=\"text-align:right;\"> 0.5397957 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_ELDERLYCARE </td>\n   <td style=\"text-align:right;\"> 1.178400 </td>\n   <td style=\"text-align:right;\"> 1.154108 </td>\n   <td style=\"text-align:right;\"> 1.206522 </td>\n   <td style=\"text-align:right;\"> 1.085541 </td>\n   <td style=\"text-align:right;\"> 0.8486080 </td>\n   <td style=\"text-align:right;\"> 0.8288284 </td>\n   <td style=\"text-align:right;\"> 0.8664703 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_HAWKER </td>\n   <td style=\"text-align:right;\"> 1.187828 </td>\n   <td style=\"text-align:right;\"> 1.163132 </td>\n   <td style=\"text-align:right;\"> 1.216262 </td>\n   <td style=\"text-align:right;\"> 1.089875 </td>\n   <td style=\"text-align:right;\"> 0.8418729 </td>\n   <td style=\"text-align:right;\"> 0.8221915 </td>\n   <td style=\"text-align:right;\"> 0.8597474 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_MRT </td>\n   <td style=\"text-align:right;\"> 1.240457 </td>\n   <td style=\"text-align:right;\"> 1.213579 </td>\n   <td style=\"text-align:right;\"> 1.270718 </td>\n   <td style=\"text-align:right;\"> 1.113758 </td>\n   <td style=\"text-align:right;\"> 0.8061545 </td>\n   <td style=\"text-align:right;\"> 0.7869568 </td>\n   <td style=\"text-align:right;\"> 0.8240092 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_PARK </td>\n   <td style=\"text-align:right;\"> 1.195883 </td>\n   <td style=\"text-align:right;\"> 1.170847 </td>\n   <td style=\"text-align:right;\"> 1.224588 </td>\n   <td style=\"text-align:right;\"> 1.093564 </td>\n   <td style=\"text-align:right;\"> 0.8362021 </td>\n   <td style=\"text-align:right;\"> 0.8166011 </td>\n   <td style=\"text-align:right;\"> 0.8540825 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_MALL </td>\n   <td style=\"text-align:right;\"> 1.409846 </td>\n   <td style=\"text-align:right;\"> 1.376277 </td>\n   <td style=\"text-align:right;\"> 1.446409 </td>\n   <td style=\"text-align:right;\"> 1.187369 </td>\n   <td style=\"text-align:right;\"> 0.7092975 </td>\n   <td style=\"text-align:right;\"> 0.6913675 </td>\n   <td style=\"text-align:right;\"> 0.7265978 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_SUPERMARKET </td>\n   <td style=\"text-align:right;\"> 1.154751 </td>\n   <td style=\"text-align:right;\"> 1.131493 </td>\n   <td style=\"text-align:right;\"> 1.182124 </td>\n   <td style=\"text-align:right;\"> 1.074594 </td>\n   <td style=\"text-align:right;\"> 0.8659873 </td>\n   <td style=\"text-align:right;\"> 0.8459353 </td>\n   <td style=\"text-align:right;\"> 0.8837880 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> WITHIN_350M_KINDERGARTEN </td>\n   <td style=\"text-align:right;\"> 1.125809 </td>\n   <td style=\"text-align:right;\"> 1.103886 </td>\n   <td style=\"text-align:right;\"> 1.152360 </td>\n   <td style=\"text-align:right;\"> 1.061042 </td>\n   <td style=\"text-align:right;\"> 0.8882499 </td>\n   <td style=\"text-align:right;\"> 0.8677846 </td>\n   <td style=\"text-align:right;\"> 0.9058910 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> WITHIN_350M_CHILDCARE </td>\n   <td style=\"text-align:right;\"> 1.335594 </td>\n   <td style=\"text-align:right;\"> 1.304923 </td>\n   <td style=\"text-align:right;\"> 1.369351 </td>\n   <td style=\"text-align:right;\"> 1.155679 </td>\n   <td style=\"text-align:right;\"> 0.7487304 </td>\n   <td style=\"text-align:right;\"> 0.7302729 </td>\n   <td style=\"text-align:right;\"> 0.7663289 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> WITHIN_350M_BUS </td>\n   <td style=\"text-align:right;\"> 1.148544 </td>\n   <td style=\"text-align:right;\"> 1.125564 </td>\n   <td style=\"text-align:right;\"> 1.175729 </td>\n   <td style=\"text-align:right;\"> 1.071701 </td>\n   <td style=\"text-align:right;\"> 0.8706679 </td>\n   <td style=\"text-align:right;\"> 0.8505364 </td>\n   <td style=\"text-align:right;\"> 0.8884435 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> WITHIN_1KM_PRISCH </td>\n   <td style=\"text-align:right;\"> 1.550879 </td>\n   <td style=\"text-align:right;\"> 1.511876 </td>\n   <td style=\"text-align:right;\"> 1.592853 </td>\n   <td style=\"text-align:right;\"> 1.245343 </td>\n   <td style=\"text-align:right;\"> 0.6447958 </td>\n   <td style=\"text-align:right;\"> 0.6278044 </td>\n   <td style=\"text-align:right;\"> 0.6614298 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(vif) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](In-class_Ex08_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n## 3.5 Predictive Modelling with MLR\n\n::: panel-tabset\n### 1. Compute adaptive bandwidth (train set)\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                  data=train_data,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n### 2. Build adpative bandwith GWR model\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_adaptive <- gwr.basic(formula = resale_price ~\n                            floor_area_sqm + storey_order +\n                            remaining_lease_mths + PROX_CBD + \n                            PROX_ELDERLYCARE + PROX_HAWKER +\n                            PROX_MRT + PROX_PARK + PROX_MALL + \n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                            WITHIN_1KM_PRISCH,\n                          data=train_data,\n                          bw=bw_adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE,\n                          longlat = FALSE)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n### 3. Compute adaptive bandwidth (test set)\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_bw_test_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                  data=test_data,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n### 4. Predict values from test set\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_pred <- gwr.predict(formula = resale_price ~\n                          floor_area_sqm + storey_order +\n                          remaining_lease_mths + PROX_CBD + \n                          PROX_ELDERLYCARE + PROX_HAWKER + \n                          PROX_MRT + PROX_PARK + PROX_MALL + \n                          PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                          WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n                          WITHIN_1KM_PRISCH, \n                        data = train_data, \n                        predictdata = test_data, \n                        bw=40, \n                        kernel = 'gaussian', \n                        adaptive=TRUE, \n                        longlat = FALSE)\n```\n:::\n\n:::\n\n# 4. Geographical Random Forest Method\n\n## 4.1 Extracting coordinates data\nWe need to extract out the coordinates from the training and test data, in order to work with SpatialML\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- st_coordinates(mdata)\ncoords_train <- st_coordinates(train_data)\ncoords_test <- st_coordinates(test_data)\n```\n:::\n\n\n## 4.2 Drop geometry field\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data_nogeom <- train_data %>% \n  st_drop_geometry()\n```\n:::\n\n\n## 4.3 Building non-spatial random forest model\nCalibrating a non-spatial RF model\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nrf <- ranger(resale_price ~ floor_area_sqm + storey_order + \n               remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + \n               PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + \n               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n               WITHIN_1KM_PRISCH,\n             data=train_data_nogeom)\nrf\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## 4.4 Building geographical random forest model\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\ngwRF_adaptive <- grf(formula = resale_price ~ floor_area_sqm + storey_order +\n                       remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE +\n                       PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +\n                       PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                       WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                       WITHIN_1KM_PRISCH,\n                     dframe=train_data_nogeom, \n                     bw=55,\n                     kernel=\"adaptive\",\n                     coords=coords_train)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK +      PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +      WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,      data = train_data_nogeom, num.trees = 500, mtry = 4, importance = \"impurity\",      num.threads = NULL) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      10335 \nNumber of independent variables:  14 \nMtry:                             4 \nTarget node size:                 5 \nVariable importance mode:         impurity \nSplitrule:                        variance \nOOB prediction error (MSE):       697593819 \nR squared (OOB):                  0.9517189 \n          floor_area_sqm             storey_order     remaining_lease_mths \n            7.413197e+12             1.538950e+13             2.890637e+13 \n                PROX_CBD         PROX_ELDERLYCARE              PROX_HAWKER \n            5.310066e+13             7.285092e+12             5.568548e+12 \n                PROX_MRT                PROX_PARK                PROX_MALL \n            7.369745e+12             4.894344e+12             4.223286e+12 \n        PROX_SUPERMARKET WITHIN_350M_KINDERGARTEN    WITHIN_350M_CHILDCARE \n            2.793853e+12             1.018586e+12             1.710374e+12 \n         WITHIN_350M_BUS        WITHIN_1KM_PRISCH \n            1.589501e+12             6.794634e+12 \n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-236112.0  -13033.7     444.4     593.8   14831.5  358041.7 \n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-79279.83  -3510.70     54.56     50.98   3909.85  83074.08 \n                               Min          Max        Mean         StD\nfloor_area_sqm                   0 401562922035 18210850992 41426270899\nstorey_order             302736445 243728744368 16368419468 23620589843\nremaining_lease_mths     696564138 546463600727 34119912443 70328183398\nPROX_CBD                  55173040 382484896335 12154563393 29293290548\nPROX_ELDERLYCARE          45182031 344081962746 10597657883 24546405941\nPROX_HAWKER               43516026 342597797419 10551807020 23408387903\nPROX_MRT                  54234551 299075025906  9873129985 21055852211\nPROX_PARK                 49919822 322633843469  9353956995 19517077658\nPROX_MALL                 43296133 433263607933 11247374493 27537334970\nPROX_SUPERMARKET          52665827 417310417234 10802122271 26572460731\nWITHIN_350M_KINDERGARTEN         0 186468064682  2848177740 12928886968\nWITHIN_350M_CHILDCARE            0 255236737234  5526292324 18109971102\nWITHIN_350M_BUS                  0 193828795378  4747552546 11886064288\nWITHIN_1KM_PRISCH                0 178360608427  1778262602  7163381668\n```\n:::\n:::\n\n\n## 4.5 Predicting values from test data\nFirst, we need to prepare the test data.\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_nogeom <- cbind(test_data, coords_test) %>%\n  st_drop_geometry()\n```\n:::\n\n\nNow, we can predict with the test data.\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_pred <- predict.grf(gwRF_adaptive, \n                           test_data_nogeom, \n                           x.var.name=\"X\",\n                           y.var.name=\"Y\", \n                           local.w=1,\n                           global.w=0)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## 4.6 Convert predicting output into dataframe\n\n::: {.cell}\n\n```{.r .cell-code}\nGRF_pred_df <- as.data.frame(gwRF_pred)\ntest_data_pred <- cbind(test_data, GRF_pred_df)\n```\n:::\n\n\n## 4.7 Evaluating using root mean square error\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse(test_data_pred$resale_price, \n     test_data_pred$gwRF_pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 27302.9\n```\n:::\n:::\n\n\n## 4.8 Visualising predicted valued\nThe chart displays the predicted values from the Geographically Weighted Random Forest (GWRF) model against the actual values. It is beneficial to visualize the over- and under-predictions of your model on the test data for better insight into its performance.\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = test_data_pred,\n       aes(x = gwRF_pred,\n           y = resale_price)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex08_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "In-class_Ex08_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}