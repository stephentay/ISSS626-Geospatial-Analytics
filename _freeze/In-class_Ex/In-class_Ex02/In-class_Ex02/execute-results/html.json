{
  "hash": "1799201f6dda31fd13adcb9f000c19bd",
  "result": {
    "markdown": "---\ntitle: \"In-class Ex 2\"\nsubtitle: \"\"\nauthor: \"Stephen Tay\"\ndate: \"2 Sep 2024\"\ndate-modified:  \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true \n---\n\n\n# Overview\n\nIn this in-class exercise, we will address common challenges encountered when working with geospatial data or using R's geospatial packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spatstat, raster, maptools, tmap, tidyverse)\n```\n:::\n\n\n# 1. Missing Longitude and Latitude Data\n\nThe Thailand Road Traffic Accident dataset includes the longitude and latitude locations of accidents. Before converting this data to an sf object, it’s essential to ensure that there are no missing or unexpected values (e.g., “NA”) in the longitude and latitude columns. Failing to address these can cause errors during conversion.\n\nAdditionally, it’s important to check that missing data does not exceed 5% of the total dataset, as this could compromise the dataset’s usability.\n\nThe code below filters out missing or \"NA\" values in the longitude and latitude columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_sf <- read_csv(\"data/aspatial/thai_road_accident_2019_2022.csv\") %>%\n  filter(!is.na(longitude) & longitude != \"\",\n         !is.na(latitude) & latitude != \"\") %>%\n  st_as_sf(coords = c(\n    \"longitude\", \"latitude\"),\n    crs = 4326) %>%\n  st_transform(crs = 32647)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 81735 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (10): province_th, province_en, agency, route, vehicle_type, presumed_c...\ndbl   (6): acc_code, number_of_vehicles_involved, number_of_fatalities, numb...\ndttm  (2): incident_datetime, report_datetime\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nNow that we have removed all missing or \"NA\" values in the longitude and latitude columns, the point geometry has been successfully created.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(rdacc_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 81,376\nColumns: 17\n$ acc_code                    <dbl> 571905, 3790870, 599075, 571924, 599523, 5…\n$ incident_datetime           <dttm> 2019-01-01 00:00:00, 2019-01-01 00:03:00,…\n$ report_datetime             <dttm> 2019-01-02 06:11:00, 2020-02-20 13:48:00,…\n$ province_th                 <chr> \"ลพบุรี\", \"อุบลราชธานี\", \"ประจวบคีรีขันธ์\", \"เชียงใ…\n$ province_en                 <chr> \"Loburi\", \"Ubon Ratchathani\", \"Prachuap Kh…\n$ agency                      <chr> \"department of rural roads\", \"department o…\n$ route                       <chr> \"แยกทางหลวงหมายเลข 21 (กม.ที่ 31+000) - บ้านวั…\n$ vehicle_type                <chr> \"motorcycle\", \"private/passenger car\", \"mo…\n$ presumed_cause              <chr> \"driving under the influence of alcohol\", …\n$ accident_type               <chr> \"other\", \"rollover/fallen on straight road…\n$ number_of_vehicles_involved <dbl> 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, …\n$ number_of_fatalities        <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 3, 0, 0, 1, 0, 0, …\n$ number_of_injuries          <dbl> 2, 2, 0, 1, 0, 2, 2, 0, 0, 1, 1, 0, 1, 1, …\n$ weather_condition           <chr> \"clear\", \"clear\", \"clear\", \"clear\", \"clear…\n$ road_description            <chr> \"straight road\", \"straight road\", \"wide cu…\n$ slope_description           <chr> \"no slope\", \"no slope\", \"slope area\", \"no …\n$ geometry                    <POINT [m]> POINT (701480.8 1654653), POINT (113…\n```\n:::\n:::\n\n\n# 2. Converting KDE Outputs to Gridded Kernal Density Objects\n\n## 2.1 Retired `maptools`\n\nThe `as.SpatialGridDataFrame.im()` function from the `maptools` package is used to convert KDE outputs into gridded kernel density objects. However, `maptools` has been retired, and its binary has been removed from CRAN, making it unavailable for installation through conventional methods. You can still download it from **Posit Public Package Manager** snapshots using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"maptools\", repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n```\n:::\n\n\n\n\nHere's the gridded kernel density object using the `as.SpatialGridDataFrame.im()` function from the `maptools` package\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngridded_kde_childcareSG_bw <- maptools::as.SpatialGridDataFrame.im(kde_childcareSG.bw)\nspplot(gridded_kde_childcareSG_bw)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex02_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## 2.2 `spatstat.geom` alternative to `as.SpatialGridDataFrame.im()`\n\nIf you prefer not to use the retired `maptools` package, you can use `spatstat.geom` as an alternative to convert KDE outputs into gridded kernel density objects. The output will be the same.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngridded_kde_childcareSG_bw_spatstat <- as(kde_childcareSG.bw, \"SpatialGridDataFrame\")\nspplot(gridded_kde_childcareSG_bw_spatstat)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex02_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n# 3. Dissolving Boundaries\n\n`sf` also supports GIS functions. For example, you have the Singapore map at the planning subzone level, but you want to dissolve all internal boundaries to a single outline map of Singapore. You could do so using `st_union()`.\n\n::: panel-tabset\n## Before dissolving\n\nI have two maps here: one being the planning subzone, the other the coastal outline.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz_sf$geometry)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex02_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(sg_sf$geometry)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex02_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## After dissolving using `st_union()`\n\nAs you can see, all administrative boundaries disappear when we use `st_union` to combine the maps.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsg_sf <- mpsz_sf %>%\n  st_union()\nplot(sg_sf)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex02_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n:::\n\n# 4. Ensuring Reproducibility when Using Monte Carlo Simulation\n\nMonte Carlo simulation is often used in geospatial analysis (e.g. generating the CSR envelop for G-, F-, K- and L- functions in point pattern analysis). To ensure reproducibility of results, it is important to set seed before using any functions involving Monte Carlo simulations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2024)\n```\n:::\n\n\n# 5. Jittering Approach for Points at the Same Location\n\nWhen multiple points share the same location (e.g., childcare centers within the same shopping center), you need to apply jittering before analysis. Ensure that the `nsim` argument in `rjitter()` is set to a value greater than 1, such as 50.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_ppp_jit <- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=50, \n                             drop=TRUE)\n```\n:::\n",
    "supporting": [
      "In-class_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}