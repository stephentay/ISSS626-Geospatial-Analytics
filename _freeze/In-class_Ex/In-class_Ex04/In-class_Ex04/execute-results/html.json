{
  "hash": "bb9a32711180d7612fcf6605ba37ba13",
  "result": {
    "markdown": "---\ntitle: \"In-class Ex 4\"\nsubtitle: \"\"\nauthor: \"Stephen Tay\"\ndate: \"16 Sep 2024\"\ndate-modified:  \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  warning: false\n  freeze: true \n---\n\n\n# Overview\n\nIn this in-class exercise, we will use R’s `GWmodel` package for spatial weight analysis. One key feature we will explore is the **geographically weighted summary statistics**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, ggstatsplot, tmap, tidyverse, knitr, GWmodel)\n```\n:::\n\n\n# 1. Importing & Transforming Data\n\nTwo datasets will be used in this in-class exercise:\n\n-   **Hunan County Boundary Layer**: A geospatial dataset in ESRI shapefile format.\n-   **Hunan_2012.csv**: A CSV file containing selected local development indicators for Hunan in 2012.\n\n::: panel-tabset\n## Hunan shapefile\n\nIn this in-class exercise, there’s no need to convert the Geographical Coordinate System to a projected coordinate system. The package used for calculating distances between neighbors automatically converts the Geographical Coordinate System into kilometers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sf <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `Hunan' from data source \n  `/Users/stephentay/stephentay/ISSS626-Geospatial-Analytics/In-class_Ex/In-class_Ex04/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n\n## Hunan 2012 development indicators\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\nglimpse(hunan2012)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 88\nColumns: 29\n$ County      <chr> \"Anhua\", \"Anren\", \"Anxiang\", \"Baojing\", \"Chaling\", \"Changn…\n$ City        <chr> \"Yiyang\", \"Chenzhou\", \"Changde\", \"Hunan West\", \"Zhuzhou\", …\n$ avg_wage    <dbl> 30544, 28058, 31935, 30843, 31251, 28518, 54540, 28597, 33…\n$ deposite    <dbl> 10967.0, 4598.9, 5517.2, 2250.0, 8241.4, 10860.0, 24332.0,…\n$ FAI         <dbl> 6831.7, 6386.1, 3541.0, 1005.4, 6508.4, 7920.0, 33624.0, 1…\n$ Gov_Rev     <dbl> 456.72, 220.57, 243.64, 192.59, 620.19, 769.86, 5350.00, 1…\n$ Gov_Exp     <dbl> 2703.0, 1454.7, 1779.5, 1379.1, 1947.0, 2631.6, 7885.5, 11…\n$ GDP         <dbl> 13225.0, 4941.2, 12482.0, 4087.9, 11585.0, 19886.0, 88009.…\n$ GDPPC       <dbl> 14567, 12761, 23667, 14563, 20078, 24418, 88656, 10132, 17…\n$ GIO         <dbl> 9276.90, 4189.20, 5108.90, 3623.50, 9157.70, 37392.00, 513…\n$ Loan        <dbl> 3954.90, 2555.30, 2806.90, 1253.70, 4287.40, 4242.80, 4053…\n$ NIPCR       <dbl> 3528.3, 3271.8, 7693.7, 4191.3, 3887.7, 9528.0, 17070.0, 3…\n$ Bed         <dbl> 2718, 970, 1931, 927, 1449, 3605, 3310, 582, 2170, 2179, 1…\n$ Emp         <dbl> 494.310, 290.820, 336.390, 195.170, 330.290, 548.610, 670.…\n$ EmpR        <dbl> 441.4, 255.4, 270.5, 145.6, 299.0, 415.1, 452.0, 127.6, 21…\n$ EmpRT       <dbl> 338.0, 99.4, 205.9, 116.4, 154.0, 273.7, 219.4, 94.4, 174.…\n$ Pri_Stu     <dbl> 54.175, 33.171, 19.584, 19.249, 33.906, 81.831, 59.151, 18…\n$ Sec_Stu     <dbl> 32.830, 17.505, 17.819, 11.831, 20.548, 44.485, 39.685, 7.…\n$ Household   <dbl> 290.4, 104.6, 148.1, 73.2, 148.7, 211.2, 300.3, 76.1, 139.…\n$ Household_R <dbl> 234.5, 121.9, 135.4, 69.9, 139.4, 211.7, 248.4, 59.6, 110.…\n$ NOIP        <dbl> 101, 34, 53, 18, 106, 115, 214, 17, 55, 70, 44, 84, 74, 17…\n$ Pop_R       <dbl> 670.3, 243.2, 346.0, 184.1, 301.6, 448.2, 475.1, 189.6, 31…\n$ RSCG        <dbl> 5760.60, 2386.40, 3957.90, 768.04, 4009.50, 5220.40, 22604…\n$ Pop_T       <dbl> 910.8, 388.7, 528.3, 281.3, 578.4, 816.3, 998.6, 256.7, 45…\n$ Agri        <dbl> 4942.253, 2357.764, 4524.410, 1118.561, 3793.550, 6430.782…\n$ Service     <dbl> 5414.5, 3814.1, 14100.0, 541.8, 5444.0, 13074.6, 17726.6, …\n$ Disp_Inc    <dbl> 12373, 16072, 16610, 13455, 20461, 20868, 183252, 12379, 1…\n$ RORP        <dbl> 0.7359464, 0.6256753, 0.6549309, 0.6544614, 0.5214385, 0.5…\n$ ROREmp      <dbl> 0.8929619, 0.8782065, 0.8041262, 0.7460163, 0.9052651, 0.7…\n```\n:::\n:::\n\n\n## Combining datasets\n\nSome development indicators from `hunan2012` are needed to be added into hunan's sf dataframe. The datasets are joined by **County**. You need to select the variables of interest in your dataset and drop all others before you start your analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sf <- left_join(hunan_sf, hunan2012, by = \"County\") %>%\n  select(1:3, 7, 15, 16, 31, 32)\nglimpse(hunan_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 88\nColumns: 9\n$ NAME_2   <chr> \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Chang…\n$ ID_3     <int> 21098, 21100, 21101, 21102, 21103, 21104, 21109, 21110, 21111…\n$ NAME_3   <chr> \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"Liu…\n$ County   <chr> \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"Liu…\n$ GDPPC    <dbl> 23667, 20981, 34592, 24473, 25554, 27137, 63118, 62202, 70666…\n$ GIO      <dbl> 5108.9, 13491.0, 10935.0, 18402.0, 8214.0, 17795.0, 99254.0, …\n$ Agri     <dbl> 4524.410, 6545.350, 2562.460, 7562.340, 3583.910, 5266.510, 1…\n$ Service  <dbl> 14100.0, 17727.0, 7525.0, 53160.0, 7031.0, 6981.0, 26617.8, 1…\n$ geometry <POLYGON [°]> POLYGON ((112.0625 29.75523..., POLYGON ((112.2288 29…\n```\n:::\n:::\n\n\n## Converting to SpatialPolygonDataFrame\n\nThe `GWmodel` package is currently designed to work with the older `sp` format rather than the newer `sf` format for handling spatial data in R. Thus, we need to convert it to the `sp` format.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sp <- hunan_sf %>%\n  as_Spatial()\n```\n:::\n\n:::\n\n# 2. Geographically Weighted Summary Statistics with Adaptive Bandwidth\n\nWe need to determine adapative bandwidth. There are two methods:\n\n::: panel-tabset\n## 2.1 Cross-validation\n\nThis is based on regression. GDPPC is the dependent variable, and 1 as the arbitary independent variable. Since we are using Geographical Coordinate System which is in degre, we set `longlat = TRUE`, and it will calculate great circle distances in kilometer.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV <- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"CV\",\n                adaptive = TRUE,\n                kernel = \"bisquare\",\n                longlat = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n```\n:::\n:::\n\n\nThis is the number of nearest neighbours that you should choose.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 22\n```\n:::\n:::\n\n\n## 2.2 AIC\n\nChoose the adapative bandwidth with the least AIC value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC <- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"AIC\",\n                adaptive = TRUE,\n                kernel = \"bisquare\",\n                longlat = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n```\n:::\n:::\n\n\nThis is the number of nearest neighbours that you should choose, which is the same result from the cross-validation method. Sometimes the result may differ, both methods are acceptable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 22\n```\n:::\n:::\n\n:::\n\n# 3. Geographically Weighted Summary Statistics with Fixed Bandwidth\n\nWe need to determine fixed bandwidth.\n\n::: panel-tabset\n## 3.1 Cross-validation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV <- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"CV\",\n                adaptive = FALSE,\n                kernel = \"bisquare\",\n                longlat = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 76.29126\n```\n:::\n:::\n\n\n## 3.2 AIC\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC <- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"AIC\",\n                adaptive = FALSE,\n                kernel = \"bisquare\",\n                longlat = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFixed bandwidth: 357.4897 AICc value: 1927.631 \nFixed bandwidth: 220.985 AICc value: 1921.547 \nFixed bandwidth: 136.6204 AICc value: 1919.993 \nFixed bandwidth: 84.48025 AICc value: 1940.603 \nFixed bandwidth: 168.8448 AICc value: 1919.457 \nFixed bandwidth: 188.7606 AICc value: 1920.007 \nFixed bandwidth: 156.5362 AICc value: 1919.41 \nFixed bandwidth: 148.929 AICc value: 1919.527 \nFixed bandwidth: 161.2377 AICc value: 1919.392 \nFixed bandwidth: 164.1433 AICc value: 1919.403 \nFixed bandwidth: 159.4419 AICc value: 1919.393 \nFixed bandwidth: 162.3475 AICc value: 1919.394 \nFixed bandwidth: 160.5517 AICc value: 1919.391 \n```\n:::\n:::\n\n\nThis is more than twice the fixed bandwidth based on cross-validation method. You need to compare and choose the one that is more sensible/meaningful. In this case, it may be better to use adaptive bandwidth method as their CV and AIC methods yield similar results.\n\nWhen the bandwidth is shorter, the output will be spikier. When the bandwidth is longer, the output will be smoother.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 160.5517\n```\n:::\n:::\n\n:::\n\n# 4. Computing Geographically Weighted Summary Statistics (Adaptive Bandwidth)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat <- gwss(data = hunan_sp,\n               vars = \"GDPPC\",\n               bw = bw_AIC,\n               kernel = \"bisquare\",\n               adaptive = TRUE,\n               longlat = TRUE)\n```\n:::\n\n\nGDPPC_LM is the local mean of the variable within the local neighbourhood (taking the 22 neighbours to compute the mean). \\_LSD is the standard deviation. \\_LVar is the variance. \\_LSKe is the Local Skewness. \\_LCV is the Local Coefficient of Variation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat_df <- as.data.frame(gwstat$SDF)\nglimpse(gwstat_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 88\nColumns: 5\n$ GDPPC_LM   <dbl> 25102.42, 25102.18, 24989.21, 24902.21, 24868.40, 24644.20,…\n$ GDPPC_LSD  <dbl> 15335.16, 15358.45, 15266.41, 15206.18, 15192.31, 15045.20,…\n$ GDPPC_LVar <dbl> 235166988, 235881903, 233063303, 231227956, 230806408, 2263…\n$ GDPPC_LSKe <dbl> 2.007759, 2.005070, 2.021769, 2.033273, 2.036804, 2.065689,…\n$ GDPPC_LCV  <dbl> 0.6109034, 0.6118371, 0.6109201, 0.6106359, 0.6109083, 0.61…\n```\n:::\n:::\n\n\nYou can use `cbind` (i.e. column join) as long as you did not do any programmatically sorting.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_gstat <- cbind(hunan_sf, gwstat_df)\nglimpse(hunan_gstat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 88\nColumns: 14\n$ NAME_2     <chr> \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Cha…\n$ ID_3       <int> 21098, 21100, 21101, 21102, 21103, 21104, 21109, 21110, 211…\n$ NAME_3     <chr> \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"L…\n$ County     <chr> \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"L…\n$ GDPPC      <dbl> 23667, 20981, 34592, 24473, 25554, 27137, 63118, 62202, 706…\n$ GIO        <dbl> 5108.9, 13491.0, 10935.0, 18402.0, 8214.0, 17795.0, 99254.0…\n$ Agri       <dbl> 4524.410, 6545.350, 2562.460, 7562.340, 3583.910, 5266.510,…\n$ Service    <dbl> 14100.0, 17727.0, 7525.0, 53160.0, 7031.0, 6981.0, 26617.8,…\n$ GDPPC_LM   <dbl> 25102.42, 25102.18, 24989.21, 24902.21, 24868.40, 24644.20,…\n$ GDPPC_LSD  <dbl> 15335.16, 15358.45, 15266.41, 15206.18, 15192.31, 15045.20,…\n$ GDPPC_LVar <dbl> 235166988, 235881903, 233063303, 231227956, 230806408, 2263…\n$ GDPPC_LSKe <dbl> 2.007759, 2.005070, 2.021769, 2.033273, 2.036804, 2.065689,…\n$ GDPPC_LCV  <dbl> 0.6109034, 0.6118371, 0.6109201, 0.6106359, 0.6109083, 0.61…\n$ geometry   <POLYGON [°]> POLYGON ((112.0625 29.75523..., POLYGON ((112.2288 …\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(hunan_gstat) + # display all polygons\n  tm_fill(\"GDPPC_LM\",\n          n = 5,\n          style = \"quantile\") + #classification method is quantile\n  tm_borders(alpha = 0.5) + #set colour of boundary\n  tm_layout(main.title = \"Distribution of geographically weighted mean\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.text.size = 0.6,\n            legend.height = 0.6,\n            legend.width = 0.6,\n            frame = TRUE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n# 5. Geographically Weighted Correlation with Adaptive Bandwidth\n\n**Business question:** Is there any relationship between GDP per capita and Gross Industry Output?\n\n## 5.1 Conventional Statistical Solution\n\nThe conventional approach to correlation involves calculating the relationship between two variables without considering geographic factors. While useful, this method is limited because it doesn’t reveal how the correlation varies across a region or how it may be influenced by neighboring areas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggscatterstats(\n  data = hunan2012, \n  x = Agri, \n  y = GDPPC,\n  xlab = \"Gross Agriculture Output\", ## label for the x-axis\n  ylab = \"GDP per capita\", \n  label.var = County, \n  label.expression = Agri > 10000 & GDPPC > 50000, \n  point.label.args = list(alpha = 0.7, size = 4, color = \"grey50\"),\n  xfill = \"#CC79A7\", \n  yfill = \"#009E73\", \n  title = \"Relationship between GDP PC and Gross Agriculture Output\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n## 5.2 Geospatial Analytical Solution\n\nA geospatial approach, such as geographically weighted correlation (GWC), adds deeper insights by accounting for spatial variability. To perform GWC, we first determine the appropriate bandwidth, then compute the geographically weighted correlation, and finally append the results to the `hunan_sf` data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Determining the bandwidth\nbw <- bw.gwr(GDPPC ~ GIO, \n             data = hunan_sp, \n             approach = \"AICc\", \n             adaptive = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1870.235 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1870.852 \nAdaptive bandwidth (number of nearest neighbours): 72 AICc value: 1869.744 \nAdaptive bandwidth (number of nearest neighbours): 78 AICc value: 1869.713 \nAdaptive bandwidth (number of nearest neighbours): 82 AICc value: 1869.604 \nAdaptive bandwidth (number of nearest neighbours): 84 AICc value: 1869.537 \nAdaptive bandwidth (number of nearest neighbours): 86 AICc value: 1869.647 \nAdaptive bandwidth (number of nearest neighbours): 83 AICc value: 1869.567 \nAdaptive bandwidth (number of nearest neighbours): 84 AICc value: 1869.537 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 2: Computing the geographical weighted correlation\ngwstats <- gwss(data = hunan_sp,\n               vars = c(\"GDPPC\", \"GIO\"),\n               bw = bw,\n               kernel = \"bisquare\",\n               adaptive = TRUE,\n               longlat = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 3: Extracting SDF data table from gwss output, and appending the results\ngwstat_df <- as.data.frame(gwstats$SDF) %>%\n  select(c(12,13)) %>%\n  rename(gwCorr = Corr_GDPPC.GIO,\n         gwSpearman = Spearman_rho_GDPPC.GIO)\n\nhunan_Corr <- cbind(hunan_sf, gwstat_df)\n```\n:::\n\n\n## 5.3 Visualising Local Correlation using Spearman Rho\n\nWe use **Spearman’s Rho** because it is a non-parametric statistic, making it robust for handling non-linear relationships and ranked data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(hunan_Corr) +\n  tm_fill(\"gwSpearman\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Local Spearman Rho\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.text.size = 0.6,\n            legend.height = 0.6, \n            legend.width = 0.6,\n            frame = TRUE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "In-class_Ex04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}